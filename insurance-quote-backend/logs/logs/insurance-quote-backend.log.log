2025-08-03 01:00:26.965 [background-preinit] INFO  [o.h.validator.internal.util.Version:21] - HV000001: Hibernate Validator 8.0.1.Final
2025-08-03 01:00:27.000 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:50] - Starting InsuranceQuoteApplication using Java 21.0.2 with PID 111371 (/home/aiworks/insurance-quote-backend/target/classes started by aiworks in /home/aiworks/insurance-quote-backend)
2025-08-03 01:00:27.000 [restartedMain] DEBUG [c.i.quote.InsuranceQuoteApplication:51] - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-08-03 01:00:27.001 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:659] - The following 1 profile is active: "dev"
2025-08-03 01:00:27.032 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-03 01:00:27.032 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-03 01:00:27.778 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:139] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-03 01:00:27.819 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:208] - Finished Spring Data repository scanning in 37 ms. Found 3 JPA repository interfaces.
2025-08-03 01:00:28.392 [restartedMain] INFO  [o.s.b.w.e.tomcat.TomcatWebServer:108] - Tomcat initialized with port 8080 (http)
2025-08-03 01:00:28.401 [restartedMain] INFO  [o.a.coyote.http11.Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
2025-08-03 01:00:28.405 [restartedMain] INFO  [o.a.catalina.core.StandardService:173] - Starting service [Tomcat]
2025-08-03 01:00:28.405 [restartedMain] INFO  [o.a.catalina.core.StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-08-03 01:00:28.450 [restartedMain] INFO  [o.a.c.c.C.[.[localhost].[/api]:173] - Initializing Spring embedded WebApplicationContext
2025-08-03 01:00:28.451 [restartedMain] INFO  [o.s.b.w.s.c.ServletWebServerApplicationContext:296] - Root WebApplicationContext: initialization completed in 1419 ms
2025-08-03 01:00:28.573 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:110] - HikariPool-1 - Starting...
2025-08-03 01:00:28.681 [restartedMain] INFO  [com.zaxxer.hikari.pool.HikariPool:565] - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:insurance_quote_db user=SA
2025-08-03 01:00:28.682 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:123] - HikariPool-1 - Start completed.
2025-08-03 01:00:28.690 [restartedMain] INFO  [o.s.b.a.h.H2ConsoleAutoConfiguration:88] - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:insurance_quote_db'
2025-08-03 01:00:28.820 [restartedMain] INFO  [o.h.jpa.internal.util.LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-03 01:00:28.848 [restartedMain] INFO  [org.hibernate.Version:44] - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-08-03 01:00:28.864 [restartedMain] INFO  [o.h.c.i.RegionFactoryInitiator:50] - HHH000026: Second-level cache disabled
2025-08-03 01:00:28.979 [restartedMain] INFO  [o.s.o.j.p.SpringPersistenceUnitInfo:87] - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-03 01:00:29.003 [restartedMain] WARN  [org.hibernate.orm.deprecation:152] - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-03 01:00:29.576 [restartedMain] INFO  [o.h.e.t.j.p.i.JtaPlatformInitiator:58] - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-03 01:00:29.623 [restartedMain] INFO  [o.s.o.j.LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-03 01:00:29.637 [restartedMain] WARN  [o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext:624] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'webConfig': Injection of autowired dependencies failed
2025-08-03 01:00:29.637 [restartedMain] INFO  [o.s.o.j.LocalContainerEntityManagerFactoryBean:650] - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-03 01:00:29.645 [restartedMain] WARN  [o.s.b.f.s.DisposableBeanAdapter:221] - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2025-08-03 01:00:29.645 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:350] - HikariPool-1 - Shutdown initiated...
2025-08-03 01:00:29.647 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:352] - HikariPool-1 - Shutdown completed.
2025-08-03 01:00:29.648 [restartedMain] INFO  [o.a.catalina.core.StandardService:173] - Stopping service [Tomcat]
2025-08-03 01:00:29.659 [restartedMain] INFO  [o.s.b.a.l.ConditionEvaluationReportLogger:82] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-08-03 01:00:29.671 [restartedMain] ERROR [o.s.boot.SpringApplication:839] - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'webConfig': Injection of autowired dependencies failed
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:499)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.insurance.quote.InsuranceQuoteApplication.main(InsuranceQuoteApplication.java:27)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'app.cors.allowed-origins' in value "${app.cors.allowed-origins}"
	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:180)
	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126)
	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:239)
	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:921)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1372)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:769)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:752)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:493)
	... 20 common frames omitted
2025-08-03 01:01:07.100 [background-preinit] INFO  [o.h.validator.internal.util.Version:21] - HV000001: Hibernate Validator 8.0.1.Final
2025-08-03 01:01:07.124 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:50] - Starting InsuranceQuoteApplication using Java 21.0.2 with PID 112100 (/home/aiworks/insurance-quote-backend/target/classes started by aiworks in /home/aiworks/insurance-quote-backend)
2025-08-03 01:01:07.125 [restartedMain] DEBUG [c.i.quote.InsuranceQuoteApplication:51] - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-08-03 01:01:07.125 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:659] - The following 1 profile is active: "dev"
2025-08-03 01:01:07.163 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-03 01:01:07.163 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-03 01:01:07.936 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:139] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-03 01:01:07.977 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:208] - Finished Spring Data repository scanning in 36 ms. Found 3 JPA repository interfaces.
2025-08-03 01:01:08.688 [restartedMain] INFO  [o.s.b.w.e.tomcat.TomcatWebServer:108] - Tomcat initialized with port 8080 (http)
2025-08-03 01:01:08.696 [restartedMain] INFO  [o.a.coyote.http11.Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
2025-08-03 01:01:08.698 [restartedMain] INFO  [o.a.catalina.core.StandardService:173] - Starting service [Tomcat]
2025-08-03 01:01:08.698 [restartedMain] INFO  [o.a.catalina.core.StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-08-03 01:01:08.745 [restartedMain] INFO  [o.a.c.c.C.[.[localhost].[/api]:173] - Initializing Spring embedded WebApplicationContext
2025-08-03 01:01:08.746 [restartedMain] INFO  [o.s.b.w.s.c.ServletWebServerApplicationContext:296] - Root WebApplicationContext: initialization completed in 1582 ms
2025-08-03 01:01:08.869 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:110] - HikariPool-1 - Starting...
2025-08-03 01:01:09.009 [restartedMain] INFO  [com.zaxxer.hikari.pool.HikariPool:565] - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:insurance_quote_db user=SA
2025-08-03 01:01:09.011 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:123] - HikariPool-1 - Start completed.
2025-08-03 01:01:09.021 [restartedMain] INFO  [o.s.b.a.h.H2ConsoleAutoConfiguration:88] - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:insurance_quote_db'
2025-08-03 01:01:09.175 [restartedMain] INFO  [o.h.jpa.internal.util.LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-03 01:01:09.204 [restartedMain] INFO  [org.hibernate.Version:44] - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-08-03 01:01:09.226 [restartedMain] INFO  [o.h.c.i.RegionFactoryInitiator:50] - HHH000026: Second-level cache disabled
2025-08-03 01:01:09.348 [restartedMain] INFO  [o.s.o.j.p.SpringPersistenceUnitInfo:87] - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-03 01:01:09.375 [restartedMain] WARN  [org.hibernate.orm.deprecation:152] - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-03 01:01:10.032 [restartedMain] INFO  [o.h.e.t.j.p.i.JtaPlatformInitiator:58] - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-03 01:01:10.078 [restartedMain] INFO  [o.s.o.j.LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-03 01:01:10.092 [restartedMain] WARN  [o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext:624] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'webConfig': Injection of autowired dependencies failed
2025-08-03 01:01:10.093 [restartedMain] INFO  [o.s.o.j.LocalContainerEntityManagerFactoryBean:650] - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-03 01:01:10.101 [restartedMain] WARN  [o.s.b.f.s.DisposableBeanAdapter:221] - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2025-08-03 01:01:10.101 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:350] - HikariPool-1 - Shutdown initiated...
2025-08-03 01:01:10.103 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:352] - HikariPool-1 - Shutdown completed.
2025-08-03 01:01:10.104 [restartedMain] INFO  [o.a.catalina.core.StandardService:173] - Stopping service [Tomcat]
2025-08-03 01:01:10.115 [restartedMain] INFO  [o.s.b.a.l.ConditionEvaluationReportLogger:82] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-08-03 01:01:10.127 [restartedMain] ERROR [o.s.boot.SpringApplication:839] - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'webConfig': Injection of autowired dependencies failed
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:499)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.insurance.quote.InsuranceQuoteApplication.main(InsuranceQuoteApplication.java:27)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'app.cors.allowed-origins' in value "${app.cors.allowed-origins}"
	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:180)
	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126)
	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:239)
	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:921)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1372)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:769)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:752)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:493)
	... 20 common frames omitted
2025-08-03 01:02:38.035 [background-preinit] INFO  [o.h.validator.internal.util.Version:21] - HV000001: Hibernate Validator 8.0.1.Final
2025-08-03 01:02:38.066 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:50] - Starting InsuranceQuoteApplication using Java 21.0.2 with PID 112958 (/home/aiworks/insurance-quote-backend/target/classes started by aiworks in /home/aiworks/insurance-quote-backend)
2025-08-03 01:02:38.067 [restartedMain] DEBUG [c.i.quote.InsuranceQuoteApplication:51] - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-08-03 01:02:38.069 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:659] - The following 1 profile is active: "dev"
2025-08-03 01:02:38.108 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-03 01:02:38.108 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-03 01:02:38.862 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:139] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-03 01:02:38.911 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:208] - Finished Spring Data repository scanning in 45 ms. Found 3 JPA repository interfaces.
2025-08-03 01:02:39.478 [restartedMain] INFO  [o.s.b.w.e.tomcat.TomcatWebServer:108] - Tomcat initialized with port 8080 (http)
2025-08-03 01:02:39.485 [restartedMain] INFO  [o.a.coyote.http11.Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
2025-08-03 01:02:39.487 [restartedMain] INFO  [o.a.catalina.core.StandardService:173] - Starting service [Tomcat]
2025-08-03 01:02:39.487 [restartedMain] INFO  [o.a.catalina.core.StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-08-03 01:02:39.533 [restartedMain] INFO  [o.a.c.c.C.[.[localhost].[/api]:173] - Initializing Spring embedded WebApplicationContext
2025-08-03 01:02:39.534 [restartedMain] INFO  [o.s.b.w.s.c.ServletWebServerApplicationContext:296] - Root WebApplicationContext: initialization completed in 1426 ms
2025-08-03 01:02:39.652 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:110] - HikariPool-1 - Starting...
2025-08-03 01:02:39.761 [restartedMain] INFO  [com.zaxxer.hikari.pool.HikariPool:565] - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:insurance_quote_db user=SA
2025-08-03 01:02:39.763 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:123] - HikariPool-1 - Start completed.
2025-08-03 01:02:39.771 [restartedMain] INFO  [o.s.b.a.h.H2ConsoleAutoConfiguration:88] - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:insurance_quote_db'
2025-08-03 01:02:39.922 [restartedMain] INFO  [o.h.jpa.internal.util.LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-03 01:02:39.948 [restartedMain] INFO  [org.hibernate.Version:44] - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-08-03 01:02:39.965 [restartedMain] INFO  [o.h.c.i.RegionFactoryInitiator:50] - HHH000026: Second-level cache disabled
2025-08-03 01:02:40.084 [restartedMain] INFO  [o.s.o.j.p.SpringPersistenceUnitInfo:87] - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-03 01:02:40.112 [restartedMain] WARN  [org.hibernate.orm.deprecation:152] - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-03 01:02:40.710 [restartedMain] INFO  [o.h.e.t.j.p.i.JtaPlatformInitiator:58] - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-03 01:02:40.759 [restartedMain] INFO  [o.s.o.j.LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-03 01:02:41.078 [restartedMain] INFO  [o.s.d.j.r.query.QueryEnhancerFactory:49] - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-03 01:02:41.336 [restartedMain] WARN  [o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext:624] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'quoteController' defined in file [/home/aiworks/insurance-quote-backend/target/classes/com/insurance/quote/controller/QuoteController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'quoteServiceImpl' defined in file [/home/aiworks/insurance-quote-backend/target/classes/com/insurance/quote/service/impl/QuoteServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'quoteRepository' defined in com.insurance.quote.repository.QuoteRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.util.List com.insurance.quote.repository.QuoteRepository.findQuotesCreatedToday(); Reason: Validation failed for query for method public abstract java.util.List com.insurance.quote.repository.QuoteRepository.findQuotesCreatedToday()
2025-08-03 01:02:41.336 [restartedMain] INFO  [o.s.o.j.LocalContainerEntityManagerFactoryBean:650] - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-03 01:02:41.343 [restartedMain] WARN  [o.s.b.f.s.DisposableBeanAdapter:221] - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2025-08-03 01:02:41.343 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:350] - HikariPool-1 - Shutdown initiated...
2025-08-03 01:02:41.345 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:352] - HikariPool-1 - Shutdown completed.
2025-08-03 01:02:41.347 [restartedMain] INFO  [o.a.catalina.core.StandardService:173] - Stopping service [Tomcat]
2025-08-03 01:02:41.359 [restartedMain] INFO  [o.s.b.a.l.ConditionEvaluationReportLogger:82] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-08-03 01:02:41.370 [restartedMain] ERROR [o.s.boot.SpringApplication:839] - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'quoteController' defined in file [/home/aiworks/insurance-quote-backend/target/classes/com/insurance/quote/controller/QuoteController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'quoteServiceImpl' defined in file [/home/aiworks/insurance-quote-backend/target/classes/com/insurance/quote/service/impl/QuoteServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'quoteRepository' defined in com.insurance.quote.repository.QuoteRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.util.List com.insurance.quote.repository.QuoteRepository.findQuotesCreatedToday(); Reason: Validation failed for query for method public abstract java.util.List com.insurance.quote.repository.QuoteRepository.findQuotesCreatedToday()
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:802)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.insurance.quote.InsuranceQuoteApplication.main(InsuranceQuoteApplication.java:29)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'quoteServiceImpl' defined in file [/home/aiworks/insurance-quote-backend/target/classes/com/insurance/quote/service/impl/QuoteServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'quoteRepository' defined in com.insurance.quote.repository.QuoteRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.util.List com.insurance.quote.repository.QuoteRepository.findQuotesCreatedToday(); Reason: Validation failed for query for method public abstract java.util.List com.insurance.quote.repository.QuoteRepository.findQuotesCreatedToday()
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:802)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 22 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'quoteRepository' defined in com.insurance.quote.repository.QuoteRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.util.List com.insurance.quote.repository.QuoteRepository.findQuotesCreatedToday(); Reason: Validation failed for query for method public abstract java.util.List com.insurance.quote.repository.QuoteRepository.findQuotesCreatedToday()
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1775)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 36 common frames omitted
Caused by: org.springframework.data.repository.query.QueryCreationException: Could not create query for public abstract java.util.List com.insurance.quote.repository.QuoteRepository.findQuotesCreatedToday(); Reason: Validation failed for query for method public abstract java.util.List com.insurance.quote.repository.QuoteRepository.findQuotesCreatedToday()
	at org.springframework.data.repository.query.QueryCreationException.create(QueryCreationException.java:101)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:115)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.mapMethodsToQuery(QueryExecutorMethodInterceptor.java:99)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lambda$new$0(QueryExecutorMethodInterceptor.java:88)
	at java.base/java.util.Optional.map(Optional.java:260)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.<init>(QueryExecutorMethodInterceptor.java:88)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:357)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:279)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:135)
	at org.springframework.data.util.Lazy.get(Lazy.java:113)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:285)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:132)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	... 47 common frames omitted
Caused by: java.lang.IllegalArgumentException: Validation failed for query for method public abstract java.util.List com.insurance.quote.repository.QuoteRepository.findQuotesCreatedToday()
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.validateQuery(SimpleJpaQuery.java:100)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.<init>(SimpleJpaQuery.java:70)
	at org.springframework.data.jpa.repository.query.JpaQueryFactory.fromMethodWithQueryString(JpaQueryFactory.java:60)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$DeclaredQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:170)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:252)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:95)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:111)
	... 59 common frames omitted
Caused by: java.lang.IllegalArgumentException: org.hibernate.query.SemanticException: Cannot compare left expression of type 'java.lang.Object' with right expression of type 'java.sql.Date'
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:143)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:167)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:173)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:802)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:707)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:132)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:360)
	at jdk.proxy4/jdk.proxy4.$Proxy165.createQuery(Unknown Source)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.validateQuery(SimpleJpaQuery.java:94)
	... 65 common frames omitted
Caused by: org.hibernate.query.SemanticException: Cannot compare left expression of type 'java.lang.Object' with right expression of type 'java.sql.Date'
	at org.hibernate.query.sqm.internal.TypecheckUtil.assertComparable(TypecheckUtil.java:338)
	at org.hibernate.query.sqm.tree.predicate.SqmComparisonPredicate.<init>(SqmComparisonPredicate.java:48)
	at org.hibernate.query.sqm.tree.predicate.SqmComparisonPredicate.<init>(SqmComparisonPredicate.java:34)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.createComparisonPredicate(SemanticQueryBuilder.java:2447)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitComparisonPredicate(SemanticQueryBuilder.java:2391)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitComparisonPredicate(SemanticQueryBuilder.java:268)
	at org.hibernate.grammars.hql.HqlParser$ComparisonPredicateContext.accept(HqlParser.java:6071)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitWhereClause(SemanticQueryBuilder.java:2243)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitWhereClause(SemanticQueryBuilder.java:268)
	at org.hibernate.grammars.hql.HqlParser$WhereClauseContext.accept(HqlParser.java:5822)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitQuery(SemanticQueryBuilder.java:1158)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitQuerySpecExpression(SemanticQueryBuilder.java:940)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitQuerySpecExpression(SemanticQueryBuilder.java:268)
	at org.hibernate.grammars.hql.HqlParser$QuerySpecExpressionContext.accept(HqlParser.java:1844)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSimpleQueryGroup(SemanticQueryBuilder.java:925)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSimpleQueryGroup(SemanticQueryBuilder.java:268)
	at org.hibernate.grammars.hql.HqlParser$SimpleQueryGroupContext.accept(HqlParser.java:1718)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSelectStatement(SemanticQueryBuilder.java:442)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitStatement(SemanticQueryBuilder.java:401)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.buildSemanticModel(SemanticQueryBuilder.java:310)
	at org.hibernate.query.hql.internal.StandardHqlTranslator.translate(StandardHqlTranslator.java:71)
	at org.hibernate.query.internal.QueryInterpretationCacheStandardImpl.createHqlInterpretation(QueryInterpretationCacheStandardImpl.java:165)
	at org.hibernate.query.internal.QueryInterpretationCacheStandardImpl.resolveHqlInterpretation(QueryInterpretationCacheStandardImpl.java:147)
	at org.hibernate.internal.AbstractSharedSessionContract.interpretHql(AbstractSharedSessionContract.java:744)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:794)
	... 72 common frames omitted
2025-08-03 01:03:25.636 [background-preinit] INFO  [o.h.validator.internal.util.Version:21] - HV000001: Hibernate Validator 8.0.1.Final
2025-08-03 01:03:25.670 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:50] - Starting InsuranceQuoteApplication using Java 21.0.2 with PID 113511 (/home/aiworks/insurance-quote-backend/target/classes started by aiworks in /home/aiworks/insurance-quote-backend)
2025-08-03 01:03:25.671 [restartedMain] DEBUG [c.i.quote.InsuranceQuoteApplication:51] - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-08-03 01:03:25.672 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:659] - The following 1 profile is active: "dev"
2025-08-03 01:03:25.710 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-03 01:03:25.711 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-03 01:03:26.356 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:139] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-03 01:03:26.394 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:208] - Finished Spring Data repository scanning in 33 ms. Found 3 JPA repository interfaces.
2025-08-03 01:03:26.912 [restartedMain] INFO  [o.s.b.w.e.tomcat.TomcatWebServer:108] - Tomcat initialized with port 8080 (http)
2025-08-03 01:03:26.916 [restartedMain] INFO  [o.a.coyote.http11.Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
2025-08-03 01:03:26.918 [restartedMain] INFO  [o.a.catalina.core.StandardService:173] - Starting service [Tomcat]
2025-08-03 01:03:26.918 [restartedMain] INFO  [o.a.catalina.core.StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-08-03 01:03:26.958 [restartedMain] INFO  [o.a.c.c.C.[.[localhost].[/api]:173] - Initializing Spring embedded WebApplicationContext
2025-08-03 01:03:26.959 [restartedMain] INFO  [o.s.b.w.s.c.ServletWebServerApplicationContext:296] - Root WebApplicationContext: initialization completed in 1247 ms
2025-08-03 01:03:27.082 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:110] - HikariPool-1 - Starting...
2025-08-03 01:03:27.214 [restartedMain] INFO  [com.zaxxer.hikari.pool.HikariPool:565] - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:insurance_quote_db user=SA
2025-08-03 01:03:27.215 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:123] - HikariPool-1 - Start completed.
2025-08-03 01:03:27.222 [restartedMain] INFO  [o.s.b.a.h.H2ConsoleAutoConfiguration:88] - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:insurance_quote_db'
2025-08-03 01:03:27.370 [restartedMain] INFO  [o.h.jpa.internal.util.LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-03 01:03:27.405 [restartedMain] INFO  [org.hibernate.Version:44] - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-08-03 01:03:27.427 [restartedMain] INFO  [o.h.c.i.RegionFactoryInitiator:50] - HHH000026: Second-level cache disabled
2025-08-03 01:03:27.575 [restartedMain] INFO  [o.s.o.j.p.SpringPersistenceUnitInfo:87] - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-03 01:03:27.604 [restartedMain] WARN  [org.hibernate.orm.deprecation:152] - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-03 01:03:28.216 [restartedMain] INFO  [o.h.e.t.j.p.i.JtaPlatformInitiator:58] - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-03 01:03:28.259 [restartedMain] INFO  [o.s.o.j.LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-03 01:03:28.529 [restartedMain] INFO  [o.s.d.j.r.query.QueryEnhancerFactory:49] - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-03 01:03:29.175 [restartedMain] WARN  [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration:232] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-08-03 01:03:29.217 [restartedMain] INFO  [c.insurance.quote.config.WebConfig:23] - Configuring CORS with allowed origins: [http://localhost:4200, http://localhost:4201, http://localhost:3000]
2025-08-03 01:03:29.271 [restartedMain] WARN  [o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext:624] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'requestMappingHandlerMapping' defined in class path resource [org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Could not resolve placeholder 'app.cors.allowed-origins' in value "${app.cors.allowed-origins}"
2025-08-03 01:03:29.272 [restartedMain] INFO  [o.s.o.j.LocalContainerEntityManagerFactoryBean:650] - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-03 01:03:29.282 [restartedMain] WARN  [o.s.b.f.s.DisposableBeanAdapter:221] - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2025-08-03 01:03:29.282 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:350] - HikariPool-1 - Shutdown initiated...
2025-08-03 01:03:29.285 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:352] - HikariPool-1 - Shutdown completed.
2025-08-03 01:03:29.287 [restartedMain] INFO  [o.a.catalina.core.StandardService:173] - Stopping service [Tomcat]
2025-08-03 01:03:29.303 [restartedMain] INFO  [o.s.b.a.l.ConditionEvaluationReportLogger:82] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-08-03 01:03:29.317 [restartedMain] ERROR [o.s.boot.SpringApplication:839] - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'requestMappingHandlerMapping' defined in class path resource [org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Could not resolve placeholder 'app.cors.allowed-origins' in value "${app.cors.allowed-origins}"
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1775)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.insurance.quote.InsuranceQuoteApplication.main(InsuranceQuoteApplication.java:29)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'app.cors.allowed-origins' in value "${app.cors.allowed-origins}"
	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:180)
	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126)
	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:239)
	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:921)
	at org.springframework.beans.factory.config.EmbeddedValueResolver.resolveStringValue(EmbeddedValueResolver.java:54)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.resolveCorsAnnotationValue(RequestMappingHandlerMapping.java:577)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.updateCorsConfig(RequestMappingHandlerMapping.java:543)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.initCorsConfiguration(RequestMappingHandlerMapping.java:527)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.initCorsConfiguration(RequestMappingHandlerMapping.java:79)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:646)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.registerHandlerMethod(AbstractHandlerMethodMapping.java:331)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.registerHandlerMethod(RequestMappingHandlerMapping.java:486)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.registerHandlerMethod(RequestMappingHandlerMapping.java:79)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lambda$detectHandlerMethods$2(AbstractHandlerMethodMapping.java:298)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:986)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.detectHandlerMethods(AbstractHandlerMethodMapping.java:296)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.processCandidateBean(AbstractHandlerMethodMapping.java:265)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.initHandlerMethods(AbstractHandlerMethodMapping.java:224)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.afterPropertiesSet(AbstractHandlerMethodMapping.java:212)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.afterPropertiesSet(RequestMappingHandlerMapping.java:233)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	... 19 common frames omitted
2025-08-03 01:04:18.688 [background-preinit] INFO  [o.h.validator.internal.util.Version:21] - HV000001: Hibernate Validator 8.0.1.Final
2025-08-03 01:04:18.711 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:50] - Starting InsuranceQuoteApplication using Java 21.0.2 with PID 114099 (/home/aiworks/insurance-quote-backend/target/classes started by aiworks in /home/aiworks/insurance-quote-backend)
2025-08-03 01:04:18.712 [restartedMain] DEBUG [c.i.quote.InsuranceQuoteApplication:51] - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-08-03 01:04:18.713 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:659] - The following 1 profile is active: "dev"
2025-08-03 01:04:18.746 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-03 01:04:18.746 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-03 01:04:19.418 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:139] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-03 01:04:19.459 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:208] - Finished Spring Data repository scanning in 36 ms. Found 3 JPA repository interfaces.
2025-08-03 01:04:19.946 [restartedMain] INFO  [o.s.b.w.e.tomcat.TomcatWebServer:108] - Tomcat initialized with port 8080 (http)
2025-08-03 01:04:19.952 [restartedMain] INFO  [o.a.coyote.http11.Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
2025-08-03 01:04:19.954 [restartedMain] INFO  [o.a.catalina.core.StandardService:173] - Starting service [Tomcat]
2025-08-03 01:04:19.954 [restartedMain] INFO  [o.a.catalina.core.StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-08-03 01:04:19.989 [restartedMain] INFO  [o.a.c.c.C.[.[localhost].[/api]:173] - Initializing Spring embedded WebApplicationContext
2025-08-03 01:04:19.990 [restartedMain] INFO  [o.s.b.w.s.c.ServletWebServerApplicationContext:296] - Root WebApplicationContext: initialization completed in 1244 ms
2025-08-03 01:04:20.089 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:110] - HikariPool-1 - Starting...
2025-08-03 01:04:20.195 [restartedMain] INFO  [com.zaxxer.hikari.pool.HikariPool:565] - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:insurance_quote_db user=SA
2025-08-03 01:04:20.196 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:123] - HikariPool-1 - Start completed.
2025-08-03 01:04:20.203 [restartedMain] INFO  [o.s.b.a.h.H2ConsoleAutoConfiguration:88] - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:insurance_quote_db'
2025-08-03 01:04:20.334 [restartedMain] INFO  [o.h.jpa.internal.util.LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-03 01:04:20.359 [restartedMain] INFO  [org.hibernate.Version:44] - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-08-03 01:04:20.376 [restartedMain] INFO  [o.h.c.i.RegionFactoryInitiator:50] - HHH000026: Second-level cache disabled
2025-08-03 01:04:20.483 [restartedMain] INFO  [o.s.o.j.p.SpringPersistenceUnitInfo:87] - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-03 01:04:20.504 [restartedMain] WARN  [org.hibernate.orm.deprecation:152] - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-03 01:04:21.041 [restartedMain] INFO  [o.h.e.t.j.p.i.JtaPlatformInitiator:58] - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-03 01:04:21.083 [restartedMain] INFO  [o.s.o.j.LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-03 01:04:21.340 [restartedMain] INFO  [o.s.d.j.r.query.QueryEnhancerFactory:49] - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-03 01:04:21.995 [restartedMain] WARN  [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration:232] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-08-03 01:04:22.028 [restartedMain] INFO  [c.insurance.quote.config.WebConfig:23] - Configuring CORS with allowed origins: [http://localhost:4200, http://localhost:4201, http://localhost:3000]
2025-08-03 01:04:22.636 [restartedMain] INFO  [o.s.b.d.a.OptionalLiveReloadServer:59] - LiveReload server is running on port 35729
2025-08-03 01:04:22.644 [restartedMain] INFO  [o.s.b.a.e.web.EndpointLinksResolver:58] - Exposing 4 endpoint(s) beneath base path '/actuator'
2025-08-03 01:04:22.700 [restartedMain] INFO  [o.a.coyote.http11.Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
2025-08-03 01:04:22.714 [restartedMain] INFO  [o.s.b.w.e.tomcat.TomcatWebServer:221] - Tomcat started on port 8080 (http) with context path '/api'
2025-08-03 01:04:22.723 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:56] - Started InsuranceQuoteApplication in 4.488 seconds (process running for 4.753)
2025-08-03 01:04:22.805 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:40] - 
----------------------------------------------------------
	Application 'insurance-quote-backend' is running! Access URLs:
	Local: 		http://localhost:8080/api
	External: 	http://127.0.1.1:8080/api
	Profile(s): 	[dev]
	H2 Console: 	http://localhost:8080/api/h2-console
	Swagger UI: 	http://localhost:8080/api/swagger-ui/index.html
----------------------------------------------------------
2025-08-03 01:04:28.303 [http-nio-8080-exec-1] INFO  [o.a.c.c.C.[.[localhost].[/api]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-08-03 01:04:28.304 [http-nio-8080-exec-1] INFO  [o.s.web.servlet.DispatcherServlet:532] - Initializing Servlet 'dispatcherServlet'
2025-08-03 01:04:28.305 [http-nio-8080-exec-1] INFO  [o.s.web.servlet.DispatcherServlet:554] - Completed initialization in 1 ms
2025-08-03 01:04:58.621 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: API Test Business
2025-08-03 01:04:58.630 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: API Test Business
2025-08-03 01:04:58.641 [http-nio-8080-exec-4] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto) with 3 errors: [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [NotBlank.quoteDto.businessInformation.name,NotBlank.businessInformation.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name]]; default message [Business name is required]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value [INVALID]; codes [Pattern.quoteDto.businessInformation.state,Pattern.businessInformation.state,Pattern.state,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state],[Ljakarta.validation.constraints.Pattern$Flag;@794d96e6,^[A-Z]{2}$]; default message [State must be a 2-letter uppercase code]] ]
2025-08-03 01:04:58.795 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 1 and number: IQ-20250803010458-0622
2025-08-03 01:04:59.159 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:04:59.182 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:83] - REST request to get quote: 99999
2025-08-03 01:11:38.675 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Premium Test Business
2025-08-03 01:11:38.676 [http-nio-8080-exec-4] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Premium Test Business
2025-08-03 01:11:38.698 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Full Stack Test Business
2025-08-03 01:11:38.699 [http-nio-8080-exec-5] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Full Stack Test Business
2025-08-03 01:11:38.709 [http-nio-8080-exec-4] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 2 and number: IQ-20250803011138-5001
2025-08-03 01:11:38.712 [http-nio-8080-exec-5] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 3 and number: IQ-20250803011138-0809
2025-08-03 01:11:40.492 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Persistence Test Business
2025-08-03 01:11:40.492 [http-nio-8080-exec-9] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Persistence Test Business
2025-08-03 01:11:40.502 [http-nio-8080-exec-9] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 4 and number: IQ-20250803011140-5798
2025-08-03 01:11:45.541 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Statistics Test Business
2025-08-03 01:11:45.542 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Statistics Test Business
2025-08-03 01:11:45.551 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 5 and number: IQ-20250803011145-1913
2025-08-03 01:11:49.243 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: API Test Business
2025-08-03 01:11:49.243 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: API Test Business
2025-08-03 01:11:49.250 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 6 and number: IQ-20250803011149-7761
2025-08-03 01:11:49.275 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:11:49.281 [http-nio-8080-exec-10] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto) with 3 errors: [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value [INVALID]; codes [Pattern.quoteDto.businessInformation.state,Pattern.businessInformation.state,Pattern.state,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state],[Ljakarta.validation.constraints.Pattern$Flag;@794d96e6,^[A-Z]{2}$]; default message [State must be a 2-letter uppercase code]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [NotBlank.quoteDto.businessInformation.name,NotBlank.businessInformation.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name]]; default message [Business name is required]] ]
2025-08-03 01:11:49.307 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:83] - REST request to get quote: 99999
2025-08-03 01:11:51.794 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Business
2025-08-03 01:11:51.795 [http-nio-8080-exec-7] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Business
2025-08-03 01:11:51.806 [http-nio-8080-exec-7] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 7 and number: IQ-20250803011151-4946
2025-08-03 01:21:58.454 [http-nio-8080-exec-5] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:21:58.483 [http-nio-8080-exec-7] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:21:58.584 [http-nio-8080-exec-6] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:21:59.128 [http-nio-8080-exec-9] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:21:59.599 [http-nio-8080-exec-2] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:22:35.165 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: API Test Business
2025-08-03 01:22:35.166 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: API Test Business
2025-08-03 01:22:35.177 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 8 and number: IQ-20250803012235-0104
2025-08-03 01:22:35.218 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:83] - REST request to get quote: 99999
2025-08-03 01:22:35.229 [http-nio-8080-exec-5] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto) with 3 errors: [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value [INVALID]; codes [Pattern.quoteDto.businessInformation.state,Pattern.businessInformation.state,Pattern.state,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state],[Ljakarta.validation.constraints.Pattern$Flag;@794d96e6,^[A-Z]{2}$]; default message [State must be a 2-letter uppercase code]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [NotBlank.quoteDto.businessInformation.name,NotBlank.businessInformation.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name]]; default message [Business name is required]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] ]
2025-08-03 01:22:35.299 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:22:37.826 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Business
2025-08-03 01:22:37.827 [http-nio-8080-exec-1] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Business
2025-08-03 01:22:37.848 [http-nio-8080-exec-1] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 9 and number: IQ-20250803012237-6282
2025-08-03 01:22:38.794 [http-nio-8080-exec-3] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:22:42.545 [http-nio-8080-exec-7] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "professional": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:22:44.203 [http-nio-8080-exec-10] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "technology": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:22:44.241 [http-nio-8080-exec-9] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "technology": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:22:45.838 [http-nio-8080-exec-2] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:22:48.918 [http-nio-8080-exec-5] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:22:53.039 [http-nio-8080-exec-7] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "technology": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:26:58.212 [http-nio-8080-exec-6] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:26:58.434 [http-nio-8080-exec-9] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:26:58.516 [http-nio-8080-exec-2] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:26:59.831 [http-nio-8080-exec-5] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:27:00.658 [http-nio-8080-exec-7] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:28:36.520 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: API Test Business
2025-08-03 01:28:36.522 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: API Test Business
2025-08-03 01:28:36.550 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 10 and number: IQ-20250803012836-7387
2025-08-03 01:28:36.598 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:83] - REST request to get quote: 99999
2025-08-03 01:28:36.696 [http-nio-8080-exec-2] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto) with 3 errors: [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [NotBlank.quoteDto.businessInformation.name,NotBlank.businessInformation.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name]]; default message [Business name is required]] [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value [INVALID]; codes [Pattern.quoteDto.businessInformation.state,Pattern.businessInformation.state,Pattern.state,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state],[Ljakarta.validation.constraints.Pattern$Flag;@794d96e6,^[A-Z]{2}$]; default message [State must be a 2-letter uppercase code]] ]
2025-08-03 01:28:37.000 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:28:39.490 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Business
2025-08-03 01:28:39.491 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Business
2025-08-03 01:28:39.513 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 11 and number: IQ-20250803012839-7249
2025-08-03 01:28:41.785 [http-nio-8080-exec-6] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:28:45.019 [http-nio-8080-exec-1] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "professional": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:28:46.492 [http-nio-8080-exec-3] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "technology": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:28:46.544 [http-nio-8080-exec-5] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "technology": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:28:49.152 [http-nio-8080-exec-8] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:28:51.547 [http-nio-8080-exec-6] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:30:43.037 [http-nio-8080-exec-9] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:30:43.099 [http-nio-8080-exec-2] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:30:43.196 [http-nio-8080-exec-5] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:30:43.590 [http-nio-8080-exec-8] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:30:44.081 [http-nio-8080-exec-6] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:31:19.836 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: API Test Business
2025-08-03 01:31:19.838 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: API Test Business
2025-08-03 01:31:19.848 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 12 and number: IQ-20250803013119-3478
2025-08-03 01:31:19.881 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:83] - REST request to get quote: 99999
2025-08-03 01:31:20.001 [http-nio-8080-exec-1] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto) with 3 errors: [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [NotBlank.quoteDto.businessInformation.name,NotBlank.businessInformation.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name]]; default message [Business name is required]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value [INVALID]; codes [Pattern.quoteDto.businessInformation.state,Pattern.businessInformation.state,Pattern.state,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state],[Ljakarta.validation.constraints.Pattern$Flag;@794d96e6,^[A-Z]{2}$]; default message [State must be a 2-letter uppercase code]] ]
2025-08-03 01:31:20.158 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:31:22.813 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Business
2025-08-03 01:31:22.814 [http-nio-8080-exec-7] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Business
2025-08-03 01:31:22.834 [http-nio-8080-exec-7] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 13 and number: IQ-20250803013122-7366
2025-08-03 01:31:26.144 [http-nio-8080-exec-10] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:31:28.033 [http-nio-8080-exec-3] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "professional": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:31:29.416 [http-nio-8080-exec-4] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "technology": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:31:29.472 [http-nio-8080-exec-8] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "technology": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:31:33.851 [http-nio-8080-exec-6] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:31:35.032 [http-nio-8080-exec-9] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:37:40.620 [http-nio-8080-exec-2] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:37:40.739 [http-nio-8080-exec-5] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:37:40.776 [http-nio-8080-exec-8] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:37:41.665 [http-nio-8080-exec-6] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:37:42.192 [http-nio-8080-exec-9] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:38:47.441 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: API Test Business
2025-08-03 01:38:47.442 [http-nio-8080-exec-9] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: API Test Business
2025-08-03 01:38:47.458 [http-nio-8080-exec-9] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 14 and number: IQ-20250803013847-0071
2025-08-03 01:38:47.489 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:83] - REST request to get quote: 99999
2025-08-03 01:38:47.490 [http-nio-8080-exec-1] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto) with 3 errors: [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value [INVALID]; codes [Pattern.quoteDto.businessInformation.state,Pattern.businessInformation.state,Pattern.state,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state],[Ljakarta.validation.constraints.Pattern$Flag;@794d96e6,^[A-Z]{2}$]; default message [State must be a 2-letter uppercase code]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [NotBlank.quoteDto.businessInformation.name,NotBlank.businessInformation.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name]]; default message [Business name is required]] ]
2025-08-03 01:38:47.726 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:38:50.087 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Business
2025-08-03 01:38:50.088 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Business
2025-08-03 01:38:50.105 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 15 and number: IQ-20250803013850-8463
2025-08-03 01:38:50.920 [http-nio-8080-exec-1] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:38:54.527 [http-nio-8080-exec-5] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "professional": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:38:56.804 [http-nio-8080-exec-7] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "technology": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:38:56.859 [http-nio-8080-exec-6] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "technology": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:38:58.969 [http-nio-8080-exec-9] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:39:01.375 [http-nio-8080-exec-2] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:39:06.480 [http-nio-8080-exec-5] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "technology": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:39:59.793 [http-nio-8080-exec-8] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:39:59.816 [http-nio-8080-exec-6] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:39:59.909 [http-nio-8080-exec-9] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:40:00.399 [http-nio-8080-exec-2] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:40:00.868 [http-nio-8080-exec-5] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:40:36.426 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: API Test Business
2025-08-03 01:40:36.427 [http-nio-8080-exec-5] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: API Test Business
2025-08-03 01:40:36.433 [http-nio-8080-exec-5] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 16 and number: IQ-20250803014036-5037
2025-08-03 01:40:36.460 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:83] - REST request to get quote: 99999
2025-08-03 01:40:36.510 [http-nio-8080-exec-7] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto) with 3 errors: [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [NotBlank.quoteDto.businessInformation.name,NotBlank.businessInformation.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name]]; default message [Business name is required]] [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value [INVALID]; codes [Pattern.quoteDto.businessInformation.state,Pattern.businessInformation.state,Pattern.state,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state],[Ljakarta.validation.constraints.Pattern$Flag;@794d96e6,^[A-Z]{2}$]; default message [State must be a 2-letter uppercase code]] ]
2025-08-03 01:40:36.588 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:40:38.809 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Business
2025-08-03 01:40:38.809 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Business
2025-08-03 01:40:38.835 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 17 and number: IQ-20250803014038-5622
2025-08-03 01:40:40.501 [http-nio-8080-exec-4] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:40:44.106 [http-nio-8080-exec-10] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "professional": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:40:45.492 [http-nio-8080-exec-1] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "technology": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:40:45.549 [http-nio-8080-exec-2] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "technology": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:40:47.491 [http-nio-8080-exec-5] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:40:50.343 [http-nio-8080-exec-8] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:40:54.559 [http-nio-8080-exec-6] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "technology": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:55:04.893 [background-preinit] INFO  [o.h.validator.internal.util.Version:21] - HV000001: Hibernate Validator 8.0.1.Final
2025-08-03 01:55:04.926 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:50] - Starting InsuranceQuoteApplication using Java 21.0.2 with PID 166133 (/home/aiworks/insurance-quote-backend/target/classes started by aiworks in /home/aiworks/insurance-quote-backend)
2025-08-03 01:55:04.927 [restartedMain] DEBUG [c.i.quote.InsuranceQuoteApplication:51] - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-08-03 01:55:04.928 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:659] - The following 1 profile is active: "dev"
2025-08-03 01:55:04.976 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-03 01:55:04.976 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-03 01:55:06.016 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:139] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-03 01:55:06.083 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:208] - Finished Spring Data repository scanning in 59 ms. Found 3 JPA repository interfaces.
2025-08-03 01:55:06.800 [restartedMain] INFO  [o.s.b.w.e.tomcat.TomcatWebServer:108] - Tomcat initialized with port 8080 (http)
2025-08-03 01:55:06.810 [restartedMain] INFO  [o.a.coyote.http11.Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
2025-08-03 01:55:06.814 [restartedMain] INFO  [o.a.catalina.core.StandardService:173] - Starting service [Tomcat]
2025-08-03 01:55:06.814 [restartedMain] INFO  [o.a.catalina.core.StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-08-03 01:55:06.864 [restartedMain] INFO  [o.a.c.c.C.[.[localhost].[/api]:173] - Initializing Spring embedded WebApplicationContext
2025-08-03 01:55:06.865 [restartedMain] INFO  [o.s.b.w.s.c.ServletWebServerApplicationContext:296] - Root WebApplicationContext: initialization completed in 1888 ms
2025-08-03 01:55:06.979 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:110] - HikariPool-1 - Starting...
2025-08-03 01:55:07.123 [restartedMain] INFO  [com.zaxxer.hikari.pool.HikariPool:565] - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:insurance_quote_db user=SA
2025-08-03 01:55:07.125 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:123] - HikariPool-1 - Start completed.
2025-08-03 01:55:07.133 [restartedMain] INFO  [o.s.b.a.h.H2ConsoleAutoConfiguration:88] - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:insurance_quote_db'
2025-08-03 01:55:07.290 [restartedMain] INFO  [o.h.jpa.internal.util.LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-03 01:55:07.329 [restartedMain] INFO  [org.hibernate.Version:44] - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-08-03 01:55:07.356 [restartedMain] INFO  [o.h.c.i.RegionFactoryInitiator:50] - HHH000026: Second-level cache disabled
2025-08-03 01:55:07.502 [restartedMain] INFO  [o.s.o.j.p.SpringPersistenceUnitInfo:87] - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-03 01:55:07.532 [restartedMain] WARN  [org.hibernate.orm.deprecation:152] - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-03 01:55:08.179 [restartedMain] INFO  [o.h.e.t.j.p.i.JtaPlatformInitiator:58] - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-03 01:55:08.228 [restartedMain] INFO  [o.s.o.j.LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-03 01:55:08.538 [restartedMain] INFO  [o.s.d.j.r.query.QueryEnhancerFactory:49] - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-03 01:55:09.313 [restartedMain] WARN  [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration:232] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-08-03 01:55:09.350 [restartedMain] INFO  [c.insurance.quote.config.WebConfig:23] - Configuring CORS with allowed origins: [http://localhost:4200, http://localhost:4201, http://localhost:3000]
2025-08-03 01:55:10.104 [restartedMain] WARN  [o.s.b.d.a.OptionalLiveReloadServer:62] - Unable to start LiveReload server
2025-08-03 01:55:10.113 [restartedMain] INFO  [o.s.b.a.e.web.EndpointLinksResolver:58] - Exposing 4 endpoint(s) beneath base path '/actuator'
2025-08-03 01:55:10.172 [restartedMain] INFO  [o.a.coyote.http11.Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
2025-08-03 01:55:10.177 [restartedMain] WARN  [o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext:624] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-08-03 01:55:10.180 [restartedMain] INFO  [o.s.o.j.LocalContainerEntityManagerFactoryBean:650] - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-03 01:55:10.187 [restartedMain] WARN  [o.s.b.f.s.DisposableBeanAdapter:221] - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2025-08-03 01:55:10.188 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:350] - HikariPool-1 - Shutdown initiated...
2025-08-03 01:55:10.190 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:352] - HikariPool-1 - Shutdown completed.
2025-08-03 01:55:10.202 [restartedMain] INFO  [o.s.b.a.l.ConditionEvaluationReportLogger:82] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-08-03 01:55:10.217 [restartedMain] ERROR [o.s.b.d.LoggingFailureAnalysisReporter:40] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2025-08-03 01:55:57.700 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:55:57.706 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:55:57.726 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:55:57.775 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:55:57.779 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:55:57.793 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:55:58.363 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:55:58.464 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:55:58.638 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:55:58.654 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:55:58.695 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:55:58.738 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:55:58.928 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:55:59.159 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:55:59.322 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:55:59.355 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:55:59.439 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:55:59.501 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:55:59.966 [http-nio-8080-exec-3] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:55:59.997 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:00.067 [http-nio-8080-exec-7] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:56:00.095 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:00.348 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:00.372 [http-nio-8080-exec-1] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:56:00.402 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:00.830 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:00.840 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:00.911 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:01.320 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:01.438 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:01.461 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:01.493 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:01.859 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:01.998 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:02.005 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:02.038 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:02.456 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:02.460 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:02.489 [http-nio-8080-exec-6] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:56:02.511 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:02.884 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:02.895 [http-nio-8080-exec-9] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:56:03.248 [http-nio-8080-exec-5] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "technology": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:56:03.272 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:03.766 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:04.057 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:04.150 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:04.294 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:04.476 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:04.753 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:05.489 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:05.872 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:06.186 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:06.439 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:06.621 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:06.947 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:07.201 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:07.393 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:07.623 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:07.985 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:08.141 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:08.453 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:09.514 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: API Test Business
2025-08-03 01:56:09.515 [http-nio-8080-exec-5] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: API Test Business
2025-08-03 01:56:09.524 [http-nio-8080-exec-5] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 18 and number: IQ-20250803015609-6595
2025-08-03 01:56:09.562 [http-nio-8080-exec-2] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto) with 3 errors: [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [NotBlank.quoteDto.businessInformation.name,NotBlank.businessInformation.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name]]; default message [Business name is required]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value [INVALID]; codes [Pattern.quoteDto.businessInformation.state,Pattern.businessInformation.state,Pattern.state,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state],[Ljakarta.validation.constraints.Pattern$Flag;@794d96e6,^[A-Z]{2}$]; default message [State must be a 2-letter uppercase code]] ]
2025-08-03 01:56:09.588 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:09.618 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:83] - REST request to get quote: 99999
2025-08-03 01:56:10.605 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:10.716 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:10.908 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:16.836 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:16.925 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:17.015 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:17.940 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:18.021 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:18.119 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:19.325 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:19.443 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:19.569 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:19.745 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Business
2025-08-03 01:56:19.746 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Business
2025-08-03 01:56:19.757 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 19 and number: IQ-20250803015619-3907
2025-08-03 01:56:19.765 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:25.514 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:25.591 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:25.695 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:26.676 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:26.823 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:26.934 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:32.912 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:32.997 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:33.128 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:33.489 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:33.576 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:33.759 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:33.895 [http-nio-8080-exec-7] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:56:33.907 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:33.960 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:34.089 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:34.177 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:35.980 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:36.181 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:36.383 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:36.575 [http-nio-8080-exec-6] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "professional": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:56:36.584 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:37.076 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:37.371 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:37.398 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:37.623 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:37.685 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:37.843 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:38.157 [http-nio-8080-exec-3] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "technology": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:56:38.169 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:38.248 [http-nio-8080-exec-2] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "technology": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:56:38.781 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:39.058 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:39.315 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:39.650 [http-nio-8080-exec-9] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:56:39.660 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:39.696 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:39.976 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:40.230 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:40.507 [http-nio-8080-exec-8] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "retail": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:56:40.518 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:40.619 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:40.809 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:41.095 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:41.537 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:41.659 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:41.814 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:42.320 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:42.435 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:42.565 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:42.863 [http-nio-8080-exec-9] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "technology": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 01:56:42.871 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:42.941 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:44.047 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:44.169 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:44.340 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:46.523 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:47.627 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 01:56:50.193 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 02:00:51.696 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 02:26:14.856 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 02:30:40.697 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 02:32:09.675 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 02:32:11.027 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 02:32:31.326 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:71] - REST request to update quote: 1754147731630
2025-08-03 02:32:31.328 [http-nio-8080-exec-4] INFO  [c.i.q.service.impl.QuoteServiceImpl:98] - Updating quote with ID: 1754147731630
2025-08-03 02:32:31.343 [http-nio-8080-exec-4] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [com.insurance.quote.exception.ResourceNotFoundException: Quote not found with id: 1754147731630]
2025-08-03 02:32:31.349 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 02:39:54.434 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 02:40:40.187 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 02:41:39.952 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 02:42:11.554 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 02:46:07.895 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 02:46:54.736 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 02:51:37.971 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 02:53:50.180 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 02:54:24.222 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 02:59:07.185 [background-preinit] INFO  [o.h.validator.internal.util.Version:21] - HV000001: Hibernate Validator 8.0.1.Final
2025-08-03 02:59:07.222 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:50] - Starting InsuranceQuoteApplication using Java 21.0.2 with PID 190422 (/home/aiworks/insurance-quote-backend/target/classes started by aiworks in /home/aiworks/insurance-quote-backend)
2025-08-03 02:59:07.223 [restartedMain] DEBUG [c.i.quote.InsuranceQuoteApplication:51] - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-08-03 02:59:07.224 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:659] - The following 1 profile is active: "dev"
2025-08-03 02:59:07.268 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-03 02:59:07.269 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-03 02:59:08.169 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:139] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-03 02:59:08.224 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:208] - Finished Spring Data repository scanning in 47 ms. Found 3 JPA repository interfaces.
2025-08-03 02:59:08.904 [restartedMain] INFO  [o.s.b.w.e.tomcat.TomcatWebServer:108] - Tomcat initialized with port 8080 (http)
2025-08-03 02:59:08.911 [restartedMain] INFO  [o.a.coyote.http11.Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
2025-08-03 02:59:08.913 [restartedMain] INFO  [o.a.catalina.core.StandardService:173] - Starting service [Tomcat]
2025-08-03 02:59:08.913 [restartedMain] INFO  [o.a.catalina.core.StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-08-03 02:59:08.967 [restartedMain] INFO  [o.a.c.c.C.[.[localhost].[/api]:173] - Initializing Spring embedded WebApplicationContext
2025-08-03 02:59:08.968 [restartedMain] INFO  [o.s.b.w.s.c.ServletWebServerApplicationContext:296] - Root WebApplicationContext: initialization completed in 1697 ms
2025-08-03 02:59:09.098 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:110] - HikariPool-1 - Starting...
2025-08-03 02:59:09.254 [restartedMain] INFO  [com.zaxxer.hikari.pool.HikariPool:565] - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:insurance_quote_db user=SA
2025-08-03 02:59:09.255 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:123] - HikariPool-1 - Start completed.
2025-08-03 02:59:09.267 [restartedMain] INFO  [o.s.b.a.h.H2ConsoleAutoConfiguration:88] - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:insurance_quote_db'
2025-08-03 02:59:09.448 [restartedMain] INFO  [o.h.jpa.internal.util.LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-03 02:59:09.484 [restartedMain] INFO  [org.hibernate.Version:44] - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-08-03 02:59:09.528 [restartedMain] INFO  [o.h.c.i.RegionFactoryInitiator:50] - HHH000026: Second-level cache disabled
2025-08-03 02:59:09.703 [restartedMain] INFO  [o.s.o.j.p.SpringPersistenceUnitInfo:87] - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-03 02:59:09.736 [restartedMain] WARN  [org.hibernate.orm.deprecation:152] - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-03 02:59:10.511 [restartedMain] INFO  [o.h.e.t.j.p.i.JtaPlatformInitiator:58] - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-03 02:59:10.566 [restartedMain] INFO  [o.s.o.j.LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-03 02:59:10.912 [restartedMain] INFO  [o.s.d.j.r.query.QueryEnhancerFactory:49] - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-03 02:59:11.795 [restartedMain] WARN  [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration:232] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-08-03 02:59:11.840 [restartedMain] INFO  [c.insurance.quote.config.WebConfig:23] - Configuring CORS with allowed origins: [http://localhost:4200, http://localhost:4201, http://localhost:3000]
2025-08-03 02:59:12.630 [restartedMain] WARN  [o.s.b.d.a.OptionalLiveReloadServer:62] - Unable to start LiveReload server
2025-08-03 02:59:12.650 [restartedMain] INFO  [o.s.b.a.e.web.EndpointLinksResolver:58] - Exposing 4 endpoint(s) beneath base path '/actuator'
2025-08-03 02:59:12.716 [restartedMain] INFO  [o.a.coyote.http11.Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
2025-08-03 02:59:12.721 [restartedMain] WARN  [o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext:624] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-08-03 02:59:12.724 [restartedMain] INFO  [o.s.o.j.LocalContainerEntityManagerFactoryBean:650] - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-03 02:59:12.732 [restartedMain] WARN  [o.s.b.f.s.DisposableBeanAdapter:221] - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2025-08-03 02:59:12.733 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:350] - HikariPool-1 - Shutdown initiated...
2025-08-03 02:59:12.735 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:352] - HikariPool-1 - Shutdown completed.
2025-08-03 02:59:12.749 [restartedMain] INFO  [o.s.b.a.l.ConditionEvaluationReportLogger:82] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-08-03 02:59:12.767 [restartedMain] ERROR [o.s.b.d.LoggingFailureAnalysisReporter:40] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2025-08-03 03:00:13.138 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:13.144 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:13.154 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:13.160 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:13.167 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:13.171 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:13.938 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:14.056 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:14.081 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:14.089 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:14.105 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:14.107 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:14.713 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:14.762 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:14.786 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:14.847 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:14.852 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:14.876 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:16.922 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:17.230 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:17.579 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:17.922 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:23.215 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:23.341 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:23.654 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:23.689 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:23.860 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:24.110 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:26.213 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:26.392 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:26.565 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:33.043 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:33.123 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:33.302 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:43.220 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:43.236 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:43.300 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:43.364 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:43.375 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:43.428 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:43.631 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:43.651 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:43.696 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:48.104 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:48.254 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:48.347 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:54.023 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:54.180 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:00:54.259 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:03.510 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: API Test Business
2025-08-03 03:01:03.512 [http-nio-8080-exec-9] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: API Test Business
2025-08-03 03:01:03.559 [http-nio-8080-exec-9] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 20 and number: IQ-20250803030103-0047
2025-08-03 03:01:03.625 [http-nio-8080-exec-7] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto) with 3 errors: [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value [INVALID]; codes [Pattern.quoteDto.businessInformation.state,Pattern.businessInformation.state,Pattern.state,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state],[Ljakarta.validation.constraints.Pattern$Flag;@794d96e6,^[A-Z]{2}$]; default message [State must be a 2-letter uppercase code]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [NotBlank.quoteDto.businessInformation.name,NotBlank.businessInformation.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name]]; default message [Business name is required]] ]
2025-08-03 03:01:03.647 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:03.689 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:83] - REST request to get quote: 99999
2025-08-03 03:01:04.746 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:04.867 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:05.015 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:15.654 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:15.664 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:15.711 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:15.803 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:15.855 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:15.863 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:16.040 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:16.044 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:16.067 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:17.315 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:17.323 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:17.420 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:17.432 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:17.608 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:17.679 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:18.491 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:18.587 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:18.818 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:18.962 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:19.038 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:19.159 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:24.817 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:24.899 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:25.006 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:35.592 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:35.665 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:35.811 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:46.489 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:46.613 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:46.689 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:48.040 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:48.113 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:48.258 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:49.347 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:49.430 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:49.701 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:49.850 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:49.940 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:50.084 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:54.486 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:54.558 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:54.838 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:55.653 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:55.773 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:01:55.856 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:02:01.065 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:02:01.158 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:02:01.370 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:02:02.296 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:02:02.387 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:05:06.280 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:08:44.919 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Company
2025-08-03 03:08:44.920 [http-nio-8080-exec-4] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Company
2025-08-03 03:08:44.933 [http-nio-8080-exec-4] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 21 and number: IQ-20250803030844-8964
2025-08-03 03:08:50.413 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:09:02.953 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:83] - REST request to get quote: 21
2025-08-03 03:12:19.339 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:16:17.146 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:16:20.103 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:17:08.969 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:17:41.569 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:18:02.484 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:19:02.468 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:19:11.146 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:19:28.431 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:19:37.166 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:19:46.424 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:20:09.171 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:20:17.416 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:21:32.226 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:21:34.420 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:25:45.794 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:26:44.815 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:29:44.609 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:29:56.386 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:30:06.324 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:30:16.402 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:30:32.390 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:34:21.893 [background-preinit] INFO  [o.h.validator.internal.util.Version:21] - HV000001: Hibernate Validator 8.0.1.Final
2025-08-03 03:34:21.928 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:50] - Starting InsuranceQuoteApplication using Java 21.0.2 with PID 208033 (/home/aiworks/insurance-quote-backend/target/classes started by aiworks in /home/aiworks/insurance-quote-backend)
2025-08-03 03:34:21.929 [restartedMain] DEBUG [c.i.quote.InsuranceQuoteApplication:51] - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-08-03 03:34:21.929 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:659] - The following 1 profile is active: "dev"
2025-08-03 03:34:21.967 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-03 03:34:21.967 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-03 03:34:22.688 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:139] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-03 03:34:22.731 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:208] - Finished Spring Data repository scanning in 37 ms. Found 3 JPA repository interfaces.
2025-08-03 03:34:23.304 [restartedMain] INFO  [o.s.b.w.e.tomcat.TomcatWebServer:108] - Tomcat initialized with port 8080 (http)
2025-08-03 03:34:23.312 [restartedMain] INFO  [o.a.coyote.http11.Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
2025-08-03 03:34:23.314 [restartedMain] INFO  [o.a.catalina.core.StandardService:173] - Starting service [Tomcat]
2025-08-03 03:34:23.314 [restartedMain] INFO  [o.a.catalina.core.StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-08-03 03:34:23.356 [restartedMain] INFO  [o.a.c.c.C.[.[localhost].[/api]:173] - Initializing Spring embedded WebApplicationContext
2025-08-03 03:34:23.357 [restartedMain] INFO  [o.s.b.w.s.c.ServletWebServerApplicationContext:296] - Root WebApplicationContext: initialization completed in 1389 ms
2025-08-03 03:34:23.453 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:110] - HikariPool-1 - Starting...
2025-08-03 03:34:23.584 [restartedMain] INFO  [com.zaxxer.hikari.pool.HikariPool:565] - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:insurance_quote_db user=SA
2025-08-03 03:34:23.587 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:123] - HikariPool-1 - Start completed.
2025-08-03 03:34:23.595 [restartedMain] INFO  [o.s.b.a.h.H2ConsoleAutoConfiguration:88] - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:insurance_quote_db'
2025-08-03 03:34:23.798 [restartedMain] INFO  [o.h.jpa.internal.util.LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-03 03:34:23.843 [restartedMain] INFO  [org.hibernate.Version:44] - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-08-03 03:34:23.875 [restartedMain] INFO  [o.h.c.i.RegionFactoryInitiator:50] - HHH000026: Second-level cache disabled
2025-08-03 03:34:24.051 [restartedMain] INFO  [o.s.o.j.p.SpringPersistenceUnitInfo:87] - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-03 03:34:24.089 [restartedMain] WARN  [org.hibernate.orm.deprecation:152] - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-03 03:34:24.811 [restartedMain] INFO  [o.h.e.t.j.p.i.JtaPlatformInitiator:58] - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-03 03:34:24.861 [restartedMain] INFO  [o.s.o.j.LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-03 03:34:25.182 [restartedMain] INFO  [o.s.d.j.r.query.QueryEnhancerFactory:49] - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-03 03:34:25.993 [restartedMain] WARN  [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration:232] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-08-03 03:34:26.041 [restartedMain] INFO  [c.insurance.quote.config.WebConfig:23] - Configuring CORS with allowed origins: [http://localhost:4200, http://localhost:4201, http://localhost:3000]
2025-08-03 03:34:26.766 [restartedMain] WARN  [o.s.b.d.a.OptionalLiveReloadServer:62] - Unable to start LiveReload server
2025-08-03 03:34:26.778 [restartedMain] INFO  [o.s.b.a.e.web.EndpointLinksResolver:58] - Exposing 4 endpoint(s) beneath base path '/actuator'
2025-08-03 03:34:26.847 [restartedMain] INFO  [o.a.coyote.http11.Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
2025-08-03 03:34:26.853 [restartedMain] WARN  [o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext:624] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-08-03 03:34:26.855 [restartedMain] INFO  [o.s.o.j.LocalContainerEntityManagerFactoryBean:650] - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-03 03:34:26.866 [restartedMain] WARN  [o.s.b.f.s.DisposableBeanAdapter:221] - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2025-08-03 03:34:26.867 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:350] - HikariPool-1 - Shutdown initiated...
2025-08-03 03:34:26.869 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:352] - HikariPool-1 - Shutdown completed.
2025-08-03 03:34:26.887 [restartedMain] INFO  [o.s.b.a.l.ConditionEvaluationReportLogger:82] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-08-03 03:34:26.902 [restartedMain] ERROR [o.s.b.d.LoggingFailureAnalysisReporter:40] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2025-08-03 03:34:51.593 [background-preinit] INFO  [o.h.validator.internal.util.Version:21] - HV000001: Hibernate Validator 8.0.1.Final
2025-08-03 03:34:51.631 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:50] - Starting InsuranceQuoteApplication using Java 21.0.2 with PID 208535 (/home/aiworks/insurance-quote-backend/target/classes started by aiworks in /home/aiworks/insurance-quote-backend)
2025-08-03 03:34:51.632 [restartedMain] DEBUG [c.i.quote.InsuranceQuoteApplication:51] - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-08-03 03:34:51.634 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:659] - The following 1 profile is active: "dev"
2025-08-03 03:34:51.689 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-03 03:34:51.690 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-03 03:34:52.831 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:139] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-03 03:34:52.894 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:208] - Finished Spring Data repository scanning in 55 ms. Found 3 JPA repository interfaces.
2025-08-03 03:34:53.670 [restartedMain] INFO  [o.s.b.w.e.tomcat.TomcatWebServer:108] - Tomcat initialized with port 8080 (http)
2025-08-03 03:34:53.677 [restartedMain] INFO  [o.a.coyote.http11.Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
2025-08-03 03:34:53.678 [restartedMain] INFO  [o.a.catalina.core.StandardService:173] - Starting service [Tomcat]
2025-08-03 03:34:53.679 [restartedMain] INFO  [o.a.catalina.core.StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-08-03 03:34:53.728 [restartedMain] INFO  [o.a.c.c.C.[.[localhost].[/api]:173] - Initializing Spring embedded WebApplicationContext
2025-08-03 03:34:53.729 [restartedMain] INFO  [o.s.b.w.s.c.ServletWebServerApplicationContext:296] - Root WebApplicationContext: initialization completed in 2039 ms
2025-08-03 03:34:53.865 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:110] - HikariPool-1 - Starting...
2025-08-03 03:34:54.004 [restartedMain] INFO  [com.zaxxer.hikari.pool.HikariPool:565] - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:insurance_quote_db user=SA
2025-08-03 03:34:54.006 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:123] - HikariPool-1 - Start completed.
2025-08-03 03:34:54.016 [restartedMain] INFO  [o.s.b.a.h.H2ConsoleAutoConfiguration:88] - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:insurance_quote_db'
2025-08-03 03:34:54.159 [restartedMain] INFO  [o.h.jpa.internal.util.LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-03 03:34:54.185 [restartedMain] INFO  [org.hibernate.Version:44] - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-08-03 03:34:54.205 [restartedMain] INFO  [o.h.c.i.RegionFactoryInitiator:50] - HHH000026: Second-level cache disabled
2025-08-03 03:34:54.335 [restartedMain] INFO  [o.s.o.j.p.SpringPersistenceUnitInfo:87] - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-03 03:34:54.363 [restartedMain] WARN  [org.hibernate.orm.deprecation:152] - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-03 03:34:55.000 [restartedMain] INFO  [o.h.e.t.j.p.i.JtaPlatformInitiator:58] - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-03 03:34:55.045 [restartedMain] INFO  [o.s.o.j.LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-03 03:34:55.356 [restartedMain] INFO  [o.s.d.j.r.query.QueryEnhancerFactory:49] - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-03 03:34:56.137 [restartedMain] WARN  [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration:232] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-08-03 03:34:56.173 [restartedMain] INFO  [c.insurance.quote.config.WebConfig:23] - Configuring CORS with allowed origins: [http://localhost:4200, http://localhost:4201, http://localhost:3000]
2025-08-03 03:34:56.876 [restartedMain] INFO  [o.s.b.d.a.OptionalLiveReloadServer:59] - LiveReload server is running on port 35729
2025-08-03 03:34:56.887 [restartedMain] INFO  [o.s.b.a.e.web.EndpointLinksResolver:58] - Exposing 4 endpoint(s) beneath base path '/actuator'
2025-08-03 03:34:56.938 [restartedMain] INFO  [o.a.coyote.http11.Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
2025-08-03 03:34:56.958 [restartedMain] INFO  [o.s.b.w.e.tomcat.TomcatWebServer:221] - Tomcat started on port 8080 (http) with context path '/api'
2025-08-03 03:34:56.969 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:56] - Started InsuranceQuoteApplication in 6.124 seconds (process running for 6.494)
2025-08-03 03:34:57.062 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:40] - 
----------------------------------------------------------
	Application 'insurance-quote-backend' is running! Access URLs:
	Local: 		http://localhost:8080/api
	External: 	http://127.0.1.1:8080/api
	Profile(s): 	[dev]
	H2 Console: 	http://localhost:8080/api/h2-console
	Swagger UI: 	http://localhost:8080/api/swagger-ui/index.html
----------------------------------------------------------
2025-08-03 03:37:28.300 [background-preinit] INFO  [o.h.validator.internal.util.Version:21] - HV000001: Hibernate Validator 8.0.1.Final
2025-08-03 03:37:28.325 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:50] - Starting InsuranceQuoteApplication using Java 21.0.2 with PID 210029 (/home/aiworks/insurance-quote-backend/target/classes started by aiworks in /home/aiworks/insurance-quote-backend)
2025-08-03 03:37:28.326 [restartedMain] DEBUG [c.i.quote.InsuranceQuoteApplication:51] - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-08-03 03:37:28.327 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:659] - The following 1 profile is active: "dev"
2025-08-03 03:37:28.361 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-03 03:37:28.361 [restartedMain] INFO  [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor:252] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-03 03:37:29.028 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:139] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-03 03:37:29.069 [restartedMain] INFO  [o.s.d.r.c.RepositoryConfigurationDelegate:208] - Finished Spring Data repository scanning in 36 ms. Found 3 JPA repository interfaces.
2025-08-03 03:37:29.564 [restartedMain] INFO  [o.s.b.w.e.tomcat.TomcatWebServer:108] - Tomcat initialized with port 8080 (http)
2025-08-03 03:37:29.569 [restartedMain] INFO  [o.a.coyote.http11.Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
2025-08-03 03:37:29.570 [restartedMain] INFO  [o.a.catalina.core.StandardService:173] - Starting service [Tomcat]
2025-08-03 03:37:29.571 [restartedMain] INFO  [o.a.catalina.core.StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-08-03 03:37:29.606 [restartedMain] INFO  [o.a.c.c.C.[.[localhost].[/api]:173] - Initializing Spring embedded WebApplicationContext
2025-08-03 03:37:29.606 [restartedMain] INFO  [o.s.b.w.s.c.ServletWebServerApplicationContext:296] - Root WebApplicationContext: initialization completed in 1244 ms
2025-08-03 03:37:29.698 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:110] - HikariPool-1 - Starting...
2025-08-03 03:37:29.803 [restartedMain] INFO  [com.zaxxer.hikari.pool.HikariPool:565] - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:insurance_quote_db user=SA
2025-08-03 03:37:29.804 [restartedMain] INFO  [com.zaxxer.hikari.HikariDataSource:123] - HikariPool-1 - Start completed.
2025-08-03 03:37:29.811 [restartedMain] INFO  [o.s.b.a.h.H2ConsoleAutoConfiguration:88] - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:insurance_quote_db'
2025-08-03 03:37:29.949 [restartedMain] INFO  [o.h.jpa.internal.util.LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-03 03:37:29.974 [restartedMain] INFO  [org.hibernate.Version:44] - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-08-03 03:37:29.992 [restartedMain] INFO  [o.h.c.i.RegionFactoryInitiator:50] - HHH000026: Second-level cache disabled
2025-08-03 03:37:30.100 [restartedMain] INFO  [o.s.o.j.p.SpringPersistenceUnitInfo:87] - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-03 03:37:30.126 [restartedMain] WARN  [org.hibernate.orm.deprecation:152] - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-03 03:37:30.760 [restartedMain] INFO  [o.h.e.t.j.p.i.JtaPlatformInitiator:58] - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-03 03:37:30.803 [restartedMain] INFO  [o.s.o.j.LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-03 03:37:31.078 [restartedMain] INFO  [o.s.d.j.r.query.QueryEnhancerFactory:49] - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-03 03:37:31.730 [restartedMain] WARN  [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration:232] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-08-03 03:37:31.759 [restartedMain] INFO  [c.insurance.quote.config.WebConfig:23] - Configuring CORS with allowed origins: [http://localhost:4200, http://localhost:4201, http://localhost:3000]
2025-08-03 03:37:32.467 [restartedMain] INFO  [o.s.b.d.a.OptionalLiveReloadServer:59] - LiveReload server is running on port 35729
2025-08-03 03:37:32.480 [restartedMain] INFO  [o.s.b.a.e.web.EndpointLinksResolver:58] - Exposing 4 endpoint(s) beneath base path '/actuator'
2025-08-03 03:37:32.540 [restartedMain] INFO  [o.a.coyote.http11.Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
2025-08-03 03:37:32.552 [restartedMain] INFO  [o.s.b.w.e.tomcat.TomcatWebServer:221] - Tomcat started on port 8080 (http) with context path '/api'
2025-08-03 03:37:32.564 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:56] - Started InsuranceQuoteApplication in 4.725 seconds (process running for 4.998)
2025-08-03 03:37:32.628 [restartedMain] INFO  [c.i.quote.InsuranceQuoteApplication:40] - 
----------------------------------------------------------
	Application 'insurance-quote-backend' is running! Access URLs:
	Local: 		http://localhost:8080/api
	External: 	http://127.0.1.1:8080/api
	Profile(s): 	[dev]
	H2 Console: 	http://localhost:8080/api/h2-console
	Swagger UI: 	http://localhost:8080/api/swagger-ui/index.html
----------------------------------------------------------
2025-08-03 03:38:47.310 [http-nio-8080-exec-1] INFO  [o.a.c.c.C.[.[localhost].[/api]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-08-03 03:38:47.311 [http-nio-8080-exec-1] INFO  [o.s.web.servlet.DispatcherServlet:532] - Initializing Servlet 'dispatcherServlet'
2025-08-03 03:38:47.312 [http-nio-8080-exec-1] INFO  [o.s.web.servlet.DispatcherServlet:554] - Completed initialization in 1 ms
2025-08-03 03:38:47.392 [http-nio-8080-exec-1] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource swagger-ui/index.ht.]
2025-08-03 03:38:51.679 [http-nio-8080-exec-1] INFO  [o.s.api.AbstractOpenApiResource:387] - Init duration for springdoc-openapi is: 428 ms
2025-08-03 03:41:44.590 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Company
2025-08-03 03:41:44.596 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Company
2025-08-03 03:41:44.705 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 1 and number: IQ-20250803034144-3473
2025-08-03 03:41:48.523 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Company
2025-08-03 03:41:48.524 [http-nio-8080-exec-9] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Company
2025-08-03 03:41:48.532 [http-nio-8080-exec-9] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 2 and number: IQ-20250803034148-0709
2025-08-03 03:41:53.543 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:55:46.162 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:58:53.532 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 03:59:28.287 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:00:40.268 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:00:53.048 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:01:50.278 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:04:09.543 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:04:57.975 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:05:12.218 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:06:28.621 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:06:46.327 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:06:53.034 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:07:05.225 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:07:07.347 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:09:51.919 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:11:36.970 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:12:43.486 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:12:43.618 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:12:45.647 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:12:53.995 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:13:17.274 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:13:38.655 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:13:38.694 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:15:28.841 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:15:34.985 [http-nio-8080-exec-5] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto) with 4 errors: [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [NotBlank.quoteDto.businessInformation.name,NotBlank.businessInformation.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name]]; default message [Business name is required]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value []; codes [Pattern.quoteDto.businessInformation.state,Pattern.businessInformation.state,Pattern.state,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state],[Ljakarta.validation.constraints.Pattern$Flag;@541d09e1,^[A-Z]{2}$]; default message [State must be a 2-letter uppercase code]] [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value []; codes [NotBlank.quoteDto.businessInformation.state,NotBlank.businessInformation.state,NotBlank.state,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state]]; default message [State is required]] ]
2025-08-03 04:19:42.452 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:20:01.116 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Save
2025-08-03 04:20:01.116 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Save
2025-08-03 04:20:01.134 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 3 and number: IQ-20250803042001-1666
2025-08-03 04:20:12.647 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:20:55.293 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:21:00.230 [http-nio-8080-exec-6] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto) with 4 errors: [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value []; codes [NotBlank.quoteDto.businessInformation.state,NotBlank.businessInformation.state,NotBlank.state,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state]]; default message [State is required]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [NotBlank.quoteDto.businessInformation.name,NotBlank.businessInformation.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name]]; default message [Business name is required]] [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value []; codes [Pattern.quoteDto.businessInformation.state,Pattern.businessInformation.state,Pattern.state,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state],[Ljakarta.validation.constraints.Pattern$Flag;@541d09e1,^[A-Z]{2}$]; default message [State must be a 2-letter uppercase code]] ]
2025-08-03 04:21:08.125 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:21:23.692 [http-nio-8080-exec-2] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto) with 4 errors: [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value []; codes [Pattern.quoteDto.businessInformation.state,Pattern.businessInformation.state,Pattern.state,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state],[Ljakarta.validation.constraints.Pattern$Flag;@541d09e1,^[A-Z]{2}$]; default message [State must be a 2-letter uppercase code]] [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value []; codes [NotBlank.quoteDto.businessInformation.state,NotBlank.businessInformation.state,NotBlank.state,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state]]; default message [State is required]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [NotBlank.quoteDto.businessInformation.name,NotBlank.businessInformation.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name]]; default message [Business name is required]] ]
2025-08-03 04:22:08.521 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:22:19.334 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:22:25.418 [http-nio-8080-exec-8] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto) with 4 errors: [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value []; codes [Pattern.quoteDto.businessInformation.state,Pattern.businessInformation.state,Pattern.state,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state],[Ljakarta.validation.constraints.Pattern$Flag;@541d09e1,^[A-Z]{2}$]; default message [State must be a 2-letter uppercase code]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value []; codes [NotBlank.quoteDto.businessInformation.state,NotBlank.businessInformation.state,NotBlank.state,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state]]; default message [State is required]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [NotBlank.quoteDto.businessInformation.name,NotBlank.businessInformation.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name]]; default message [Business name is required]] ]
2025-08-03 04:26:10.604 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:29:18.244 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:29:19.556 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:29:53.267 [http-nio-8080-exec-5] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "technology": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 04:30:01.279 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:30:48.894 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test
2025-08-03 04:30:48.894 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test
2025-08-03 04:30:48.901 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 4 and number: IQ-20250803043048-5031
2025-08-03 04:31:36.889 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:31:37.175 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:31:40.986 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:31:58.469 [http-nio-8080-exec-3] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$BusinessType` from String "restaurant": not one of the values accepted for Enum class: [RETAIL, PROFESSIONAL, TECHNOLOGY, HEALTHCARE, MANUFACTURING, RESTAURANT]]
2025-08-03 04:32:15.553 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:32:47.467 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:32:47.486 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:32:47.498 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:32:53.095 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:32:53.104 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:32:53.113 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:34:20.570 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:34:31.215 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:35:09.465 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:36:23.478 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:36:44.041 [http-nio-8080-exec-6] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.insurance.quote.entity.BusinessInformation$Industry` from String "HEALTHCARE": not one of the values accepted for Enum class: [HEALTHCARE_SERVICES, FOOD_SERVICE, CONSULTING, SOFTWARE, RETAIL_TRADE, MANUFACTURING]]
2025-08-03 04:36:59.878 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:37:40.369 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:37:40.389 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:38:09.171 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Soluxy Systems
2025-08-03 04:38:09.172 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Soluxy Systems
2025-08-03 04:38:09.179 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 5 and number: IQ-20250803043809-9502
2025-08-03 04:38:09.186 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:38:15.313 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:39:31.439 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:39:31.458 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:39:38.148 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:39:38.158 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:39:51.120 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:39:51.136 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:39:57.351 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:39:57.366 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:41:05.552 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:41:07.485 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:41:10.136 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:41:43.503 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: chubb
2025-08-03 04:41:43.504 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: chubb
2025-08-03 04:41:43.510 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 6 and number: IQ-20250803044143-5802
2025-08-03 04:41:43.518 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:41:56.710 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:42:19.450 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:42:31.915 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: chubb
2025-08-03 04:42:31.916 [http-nio-8080-exec-7] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: chubb
2025-08-03 04:42:31.933 [http-nio-8080-exec-7] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.dao.InvalidDataAccessApiUsageException: detached entity passed to persist: com.insurance.quote.entity.BusinessInformation]
2025-08-03 04:43:27.201 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:43:27.218 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:43:56.836 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:43:56.849 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:44:38.569 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:44:38.582 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:44:49.197 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:44:53.602 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:45:35.019 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Ranjita Clinic
2025-08-03 04:45:35.019 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Ranjita Clinic
2025-08-03 04:45:35.029 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 7 and number: IQ-20250803044535-4086
2025-08-03 04:45:35.036 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:45:40.356 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:46:33.063 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:46:33.138 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:46:33.220 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:46:33.230 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:46:42.776 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:46:43.121 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:46:43.130 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:46:43.138 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:47:00.589 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:47:01.126 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:47:01.138 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:47:01.151 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:47:28.868 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:47:31.173 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:48:15.711 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Wells
2025-08-03 04:48:15.712 [http-nio-8080-exec-9] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Wells
2025-08-03 04:48:15.719 [http-nio-8080-exec-9] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 8 and number: IQ-20250803044815-2172
2025-08-03 04:48:15.731 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:48:17.414 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Wells
2025-08-03 04:48:17.415 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Wells
2025-08-03 04:48:17.420 [http-nio-8080-exec-2] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.dao.InvalidDataAccessApiUsageException: detached entity passed to persist: com.insurance.quote.entity.BusinessInformation]
2025-08-03 04:48:35.598 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:49:46.295 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:49:46.307 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:49:48.512 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:49:52.470 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:49:52.482 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:49:57.908 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:49:58.978 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:49:58.987 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:50:01.126 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:50:16.061 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Ranjita Clinic
2025-08-03 04:50:16.061 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Ranjita Clinic
2025-08-03 04:50:16.070 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 9 and number: IQ-20250803045016-5560
2025-08-03 04:50:16.077 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:50:30.722 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:50:38.439 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Ranjita Clinic
2025-08-03 04:50:38.439 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Ranjita Clinic
2025-08-03 04:50:38.445 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 10 and number: IQ-20250803045038-9616
2025-08-03 04:50:38.451 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:51:02.964 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:51:06.535 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:51:18.702 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:51:48.750 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Business
2025-08-03 04:51:48.751 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Business
2025-08-03 04:51:48.755 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 11 and number: IQ-20250803045148-5743
2025-08-03 04:51:48.764 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:51:59.288 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:52:15.802 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:52:31.519 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:52:37.889 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:52:47.951 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Business
2025-08-03 04:52:47.951 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Business
2025-08-03 04:52:47.961 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 12 and number: IQ-20250803045247-0649
2025-08-03 04:52:47.971 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:52:53.583 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:53:02.576 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:53:15.595 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Business
2025-08-03 04:53:15.596 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Business
2025-08-03 04:53:15.599 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 13 and number: IQ-20250803045315-3571
2025-08-03 04:53:15.607 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:53:16.877 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:56:11.423 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:56:13.762 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:56:22.456 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:56:33.797 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:56:54.552 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:71] - REST request to update quote: 13
2025-08-03 04:56:54.553 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:98] - Updating quote with ID: 13
2025-08-03 04:56:54.571 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:134] - Updated quote with ID: 13
2025-08-03 04:56:54.603 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:57:01.205 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:57:12.031 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:71] - REST request to update quote: 13
2025-08-03 04:57:12.031 [http-nio-8080-exec-1] INFO  [c.i.q.service.impl.QuoteServiceImpl:98] - Updating quote with ID: 13
2025-08-03 04:57:12.033 [http-nio-8080-exec-1] INFO  [c.i.q.service.impl.QuoteServiceImpl:134] - Updated quote with ID: 13
2025-08-03 04:57:12.041 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:58:36.982 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:58:49.076 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:58:54.588 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:59:06.626 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:59:11.952 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:59:34.007 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:71] - REST request to update quote: 13
2025-08-03 04:59:34.007 [http-nio-8080-exec-1] INFO  [c.i.q.service.impl.QuoteServiceImpl:98] - Updating quote with ID: 13
2025-08-03 04:59:34.009 [http-nio-8080-exec-1] INFO  [c.i.q.service.impl.QuoteServiceImpl:134] - Updated quote with ID: 13
2025-08-03 04:59:34.017 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 04:59:42.531 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 05:05:14.240 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 05:05:14.268 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 05:10:18.009 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 05:10:18.040 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:43:47.403 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:43:47.466 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:50:23.775 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:52:01.722 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:53:11.966 [http-nio-8080-exec-1] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto) with 2 errors: [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value [ ]; codes [Pattern.quoteDto.businessInformation.state,Pattern.businessInformation.state,Pattern.state,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state],[Ljakarta.validation.constraints.Pattern$Flag;@541d09e1,^[A-Z]{2}$]; default message [State must be a 2-letter uppercase code]] [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value [ ]; codes [NotBlank.quoteDto.businessInformation.state,NotBlank.businessInformation.state,NotBlank.state,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state]]; default message [State is required]] ]
2025-08-03 06:53:38.330 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: chubb
2025-08-03 06:53:38.331 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: chubb
2025-08-03 06:53:38.340 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 14 and number: IQ-20250803065338-4550
2025-08-03 06:53:38.353 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:53:47.429 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:54:26.052 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:71] - REST request to update quote: 9
2025-08-03 06:54:26.053 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:98] - Updating quote with ID: 9
2025-08-03 06:54:26.056 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:134] - Updated quote with ID: 9
2025-08-03 06:54:26.066 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:54:39.757 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:56:19.103 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:56:27.765 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:28.438 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:28.475 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:28.614 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:28.612 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:28.641 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:28.656 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:29.270 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:29.329 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:29.411 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:29.415 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:29.463 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:29.502 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:29.752 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:29.905 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:30.068 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:30.083 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:30.259 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:30.259 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:32.366 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:32.644 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:32.848 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:33.014 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:37.929 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:38.209 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:38.409 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:59.579 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:57:59.685 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:00.237 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:00.281 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:00.327 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:00.415 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:00.661 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:00.820 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:00.824 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:00.886 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:01.394 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:01.424 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:01.947 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Full Stack Test Business
2025-08-03 06:58:01.948 [http-nio-8080-exec-4] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Full Stack Test Business
2025-08-03 06:58:01.950 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Premium Test Business
2025-08-03 06:58:01.951 [http-nio-8080-exec-5] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Premium Test Business
2025-08-03 06:58:01.970 [http-nio-8080-exec-5] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 16 and number: IQ-20250803065801-9292
2025-08-03 06:58:01.970 [http-nio-8080-exec-4] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 15 and number: IQ-20250803065801-5037
2025-08-03 06:58:02.013 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:02.013 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:02.768 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:03.198 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:03.509 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:03.959 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Persistence Test Business
2025-08-03 06:58:03.960 [http-nio-8080-exec-5] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Persistence Test Business
2025-08-03 06:58:03.992 [http-nio-8080-exec-5] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 17 and number: IQ-20250803065803-2884
2025-08-03 06:58:04.022 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:04.101 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:04.517 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:04.776 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:04.841 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:05.180 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:05.230 [http-nio-8080-exec-4] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto): [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value [A]; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] ]
2025-08-03 06:58:05.434 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:08.702 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:08.925 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:09.102 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:09.396 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Statistics Test Business
2025-08-03 06:58:09.396 [http-nio-8080-exec-7] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Statistics Test Business
2025-08-03 06:58:09.413 [http-nio-8080-exec-7] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 18 and number: IQ-20250803065809-3338
2025-08-03 06:58:09.427 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:13.145 [http-nio-8080-exec-1] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto) with 3 errors: [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value [INVALID]; codes [Pattern.quoteDto.businessInformation.state,Pattern.businessInformation.state,Pattern.state,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state],[Ljakarta.validation.constraints.Pattern$Flag;@541d09e1,^[A-Z]{2}$]; default message [State must be a 2-letter uppercase code]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [NotBlank.quoteDto.businessInformation.name,NotBlank.businessInformation.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name]]; default message [Business name is required]] ]
2025-08-03 06:58:13.194 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: API Test Business
2025-08-03 06:58:13.195 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: API Test Business
2025-08-03 06:58:13.206 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 19 and number: IQ-20250803065813-1205
2025-08-03 06:58:13.212 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:13.253 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:83] - REST request to get quote: 99999
2025-08-03 06:58:13.825 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:14.293 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:14.648 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:15.646 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:16.232 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:16.836 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:16.984 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:17.513 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:17.855 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:18.458 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:19.154 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:19.248 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:19.622 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:19.849 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:20.286 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Business
2025-08-03 06:58:20.287 [http-nio-8080-exec-1] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Business
2025-08-03 06:58:20.316 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:20.339 [http-nio-8080-exec-1] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 20 and number: IQ-20250803065820-0953
2025-08-03 06:58:20.387 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:20.590 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:21.162 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:21.589 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:21.647 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:22.150 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:22.541 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:22.588 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:23.110 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:23.199 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:23.430 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:23.561 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:23.622 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:23.900 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:23.945 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:24.180 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:26.473 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:26.714 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:26.935 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:51.058 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:51.406 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:51.635 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:52.850 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:53.399 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:53.849 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:54.867 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:55.357 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:55.399 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:55.794 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:56.068 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:56.152 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:56.520 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:56.685 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:57.010 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:58.636 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:59.018 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:59.154 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:59.375 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:59.618 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 06:58:59.889 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:01:49.610 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:01:49.610 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:01:50.097 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:01:50.127 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:01:50.630 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:01:50.682 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:01:51.770 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Final Business
2025-08-03 07:01:51.771 [http-nio-8080-exec-4] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Final Business
2025-08-03 07:01:51.833 [http-nio-8080-exec-4] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 21 and number: IQ-20250803070151-9069
2025-08-03 07:01:51.881 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:01:52.885 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:01:53.212 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:01:53.502 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:01:54.430 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:01:54.741 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:01:55.047 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:01:55.404 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Navigation Test
2025-08-03 07:01:55.405 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Navigation Test
2025-08-03 07:01:55.423 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 22 and number: IQ-20250803070155-1100
2025-08-03 07:01:55.457 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:01:58.663 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:01:59.074 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:01:59.361 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:01:59.811 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Mobile Test
2025-08-03 07:01:59.812 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Mobile Test
2025-08-03 07:01:59.827 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 23 and number: IQ-20250803070159-9950
2025-08-03 07:01:59.849 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:01.789 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:02.103 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:02.329 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:06.246 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:06.595 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:06.826 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:07.027 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:07.466 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: No Storage Test
2025-08-03 07:02:07.467 [http-nio-8080-exec-4] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: No Storage Test
2025-08-03 07:02:07.486 [http-nio-8080-exec-4] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 24 and number: IQ-20250803070207-1021
2025-08-03 07:02:07.505 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:07.825 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:08.232 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:08.614 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:09.052 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: First Business
2025-08-03 07:02:09.053 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: First Business
2025-08-03 07:02:09.081 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 25 and number: IQ-20250803070209-6932
2025-08-03 07:02:09.123 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:10.156 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:10.560 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:10.861 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:12.916 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:13.260 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:13.485 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:15.168 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:15.579 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:16.041 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:16.606 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Premium Test Business
2025-08-03 07:02:16.607 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Premium Test Business
2025-08-03 07:02:16.621 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 26 and number: IQ-20250803070216-7647
2025-08-03 07:02:16.645 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:17.214 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:17.572 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:17.827 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:18.180 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Full Stack Test Business
2025-08-03 07:02:18.181 [http-nio-8080-exec-4] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Full Stack Test Business
2025-08-03 07:02:18.188 [http-nio-8080-exec-4] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 27 and number: IQ-20250803070218-9429
2025-08-03 07:02:18.207 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:29.476 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:29.969 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:30.371 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:30.893 [http-nio-8080-exec-8] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto): [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value [A]; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] ]
2025-08-03 07:02:31.359 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:31.734 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:32.075 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:32.499 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Persistence Test Business
2025-08-03 07:02:32.500 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Persistence Test Business
2025-08-03 07:02:32.515 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 28 and number: IQ-20250803070232-4711
2025-08-03 07:02:32.540 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:42.522 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:42.924 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:43.287 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:45.274 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:45.840 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:46.295 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:46.791 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Statistics Test Business
2025-08-03 07:02:46.791 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Statistics Test Business
2025-08-03 07:02:46.810 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 29 and number: IQ-20250803070246-8402
2025-08-03 07:02:46.830 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:54.621 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: API Test Business
2025-08-03 07:02:54.622 [http-nio-8080-exec-1] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: API Test Business
2025-08-03 07:02:54.638 [http-nio-8080-exec-1] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 30 and number: IQ-20250803070254-7911
2025-08-03 07:02:54.674 [http-nio-8080-exec-2] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto) with 3 errors: [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value [INVALID]; codes [Pattern.quoteDto.businessInformation.state,Pattern.businessInformation.state,Pattern.state,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state],[Ljakarta.validation.constraints.Pattern$Flag;@541d09e1,^[A-Z]{2}$]; default message [State must be a 2-letter uppercase code]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [NotBlank.quoteDto.businessInformation.name,NotBlank.businessInformation.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name]]; default message [Business name is required]] ]
2025-08-03 07:02:54.704 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:54.726 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:83] - REST request to get quote: 99999
2025-08-03 07:02:55.874 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:56.242 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:56.515 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:58.012 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:58.244 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:58.448 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:02:59.805 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:00.017 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:00.229 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:02.066 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:02.463 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:02.716 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:03.006 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Business
2025-08-03 07:03:03.007 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Business
2025-08-03 07:03:03.017 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 31 and number: IQ-20250803070303-7116
2025-08-03 07:03:03.034 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:03.652 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:03.899 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:04.099 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:05.553 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:05.807 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:05.980 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:09.200 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:09.394 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:09.568 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:12.410 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:12.644 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:12.830 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:13.126 [http-nio-8080-exec-2] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto): [Field error in object 'quoteDto' on field 'businessInformation.name': rejected valuecodes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] ]
2025-08-03 07:03:19.144 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:19.375 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:19.533 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:19.828 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Valid Business
2025-08-03 07:03:19.829 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Valid Business
2025-08-03 07:03:19.834 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 32 and number: IQ-20250803070319-1072
2025-08-03 07:03:19.849 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:25.820 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:26.091 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:26.279 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:26.540 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test & Co. LLC (Special Characters)
2025-08-03 07:03:26.541 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test & Co. LLC (Special Characters)
2025-08-03 07:03:26.552 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 33 and number: IQ-20250803070326-2911
2025-08-03 07:03:26.564 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:32.464 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:32.676 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:32.866 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:33.175 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Network Test Business
2025-08-03 07:03:33.176 [http-nio-8080-exec-1] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Network Test Business
2025-08-03 07:03:33.231 [http-nio-8080-exec-1] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 34 and number: IQ-20250803070333-7833
2025-08-03 07:03:33.249 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Network Test Business
2025-08-03 07:03:33.252 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Network Test Business
2025-08-03 07:03:33.255 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:33.266 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 35 and number: IQ-20250803070333-2067
2025-08-03 07:03:33.296 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:03:50.169 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:44.687 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:44.713 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:45.082 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:45.123 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:45.378 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:45.417 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:46.063 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Final Business
2025-08-03 07:07:46.064 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Final Business
2025-08-03 07:07:46.082 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 36 and number: IQ-20250803070746-6897
2025-08-03 07:07:46.110 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:46.472 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:46.802 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:47.096 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:47.430 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:47.782 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:48.150 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:48.222 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:48.607 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Navigation Test
2025-08-03 07:07:48.608 [http-nio-8080-exec-9] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Navigation Test
2025-08-03 07:07:48.624 [http-nio-8080-exec-9] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 37 and number: IQ-20250803070748-3599
2025-08-03 07:07:48.647 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:48.657 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:48.762 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:49.016 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:49.404 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Mobile Test
2025-08-03 07:07:49.405 [http-nio-8080-exec-7] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Mobile Test
2025-08-03 07:07:49.416 [http-nio-8080-exec-7] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 38 and number: IQ-20250803070749-4878
2025-08-03 07:07:49.432 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:49.733 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:49.911 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:50.086 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:54.843 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:55.040 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:55.203 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:55.331 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:55.595 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: No Storage Test
2025-08-03 07:07:55.595 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: No Storage Test
2025-08-03 07:07:55.608 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 39 and number: IQ-20250803070755-5070
2025-08-03 07:07:55.625 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:55.876 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:56.175 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:56.437 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:57.329 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:57.667 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:57.890 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:58.258 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: First Business
2025-08-03 07:07:58.259 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: First Business
2025-08-03 07:07:58.272 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 40 and number: IQ-20250803070758-8373
2025-08-03 07:07:58.290 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:58.420 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:58.556 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:58.755 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Second Business
2025-08-03 07:07:58.756 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Second Business
2025-08-03 07:07:58.767 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 41 and number: IQ-20250803070758-0038
2025-08-03 07:07:58.787 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:58.904 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:59.255 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:59.259 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:59.550 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:07:59.794 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:00.112 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Full Stack Test Business
2025-08-03 07:08:00.112 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Full Stack Test Business
2025-08-03 07:08:00.123 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 42 and number: IQ-20250803070800-6451
2025-08-03 07:08:00.141 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:00.408 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:00.638 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:00.809 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:01.059 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Premium Test Business
2025-08-03 07:08:01.060 [http-nio-8080-exec-1] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Premium Test Business
2025-08-03 07:08:01.070 [http-nio-8080-exec-1] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 43 and number: IQ-20250803070801-4747
2025-08-03 07:08:01.087 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:06.029 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:06.213 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:06.377 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:06.596 [http-nio-8080-exec-9] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto): [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value [A]; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] ]
2025-08-03 07:08:17.473 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:17.610 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:17.734 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:17.980 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Persistence Test Business
2025-08-03 07:08:17.981 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Persistence Test Business
2025-08-03 07:08:17.987 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 44 and number: IQ-20250803070817-3146
2025-08-03 07:08:17.998 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:18.019 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:18.088 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:24.132 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:24.401 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:24.672 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:31.678 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:31.901 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:32.065 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:32.344 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Statistics Test Business
2025-08-03 07:08:32.344 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Statistics Test Business
2025-08-03 07:08:32.348 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 45 and number: IQ-20250803070832-6272
2025-08-03 07:08:32.362 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:32.388 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:216] - REST request to get quote statistics
2025-08-03 07:08:33.815 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: API Test Business
2025-08-03 07:08:33.815 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: API Test Business
2025-08-03 07:08:33.826 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 46 and number: IQ-20250803070833-6303
2025-08-03 07:08:33.896 [http-nio-8080-exec-9] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto) with 3 errors: [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [NotBlank.quoteDto.businessInformation.name,NotBlank.businessInformation.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name]]; default message [Business name is required]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value [INVALID]; codes [Pattern.quoteDto.businessInformation.state,Pattern.businessInformation.state,Pattern.state,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state],[Ljakarta.validation.constraints.Pattern$Flag;@541d09e1,^[A-Z]{2}$]; default message [State must be a 2-letter uppercase code]] ]
2025-08-03 07:08:33.927 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:33.965 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:83] - REST request to get quote: 99999
2025-08-03 07:08:35.223 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:35.501 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:35.717 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:36.497 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:36.717 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:36.908 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:38.215 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:38.431 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:38.597 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:39.953 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:40.162 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:40.313 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:40.523 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Business
2025-08-03 07:08:40.523 [http-nio-8080-exec-1] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Business
2025-08-03 07:08:40.527 [http-nio-8080-exec-1] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 47 and number: IQ-20250803070840-7347
2025-08-03 07:08:40.537 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:41.954 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:42.164 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:42.318 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:43.557 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:43.780 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:43.938 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:46.330 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:46.488 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:46.627 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:50.006 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:50.182 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:50.312 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:50.573 [http-nio-8080-exec-9] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto): [Field error in object 'quoteDto' on field 'businessInformation.name': rejected valuecodes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] ]
2025-08-03 07:08:56.375 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:56.501 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:56.593 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:08:56.749 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Valid Business
2025-08-03 07:08:56.749 [http-nio-8080-exec-4] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Valid Business
2025-08-03 07:08:56.753 [http-nio-8080-exec-4] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 48 and number: IQ-20250803070856-6597
2025-08-03 07:08:56.767 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:09:17.074 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:09:17.309 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:09:17.537 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:09:17.866 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test & Co. LLC (Special Characters)
2025-08-03 07:09:17.867 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test & Co. LLC (Special Characters)
2025-08-03 07:09:17.879 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 49 and number: IQ-20250803070917-0892
2025-08-03 07:09:17.899 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:09:18.252 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:09:18.526 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:09:18.748 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:09:19.062 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Network Test Business
2025-08-03 07:09:19.062 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Network Test Business
2025-08-03 07:09:19.069 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 50 and number: IQ-20250803070919-7812
2025-08-03 07:09:19.088 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:09:27.609 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:09:27.899 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:09:28.135 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:09:28.624 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:09:28.901 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:09:29.127 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:09:29.463 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Business LLC
2025-08-03 07:09:29.464 [http-nio-8080-exec-9] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Business LLC
2025-08-03 07:09:29.472 [http-nio-8080-exec-9] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 51 and number: IQ-20250803070929-2784
2025-08-03 07:09:29.492 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:09:37.295 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:09:37.918 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:09:38.374 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:14.342 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:14.544 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:14.742 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:14.791 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:14.804 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:14.834 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:15.084 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:15.225 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:15.402 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:15.541 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:15.569 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:15.650 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:15.747 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:15.822 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:15.920 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:16.070 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:16.160 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:16.184 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:16.983 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Navigation Test
2025-08-03 07:10:16.985 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Navigation Test
2025-08-03 07:10:17.016 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 52 and number: IQ-20250803071016-2182
2025-08-03 07:10:17.059 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Mobile Test
2025-08-03 07:10:17.060 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Mobile Test
2025-08-03 07:10:17.062 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:17.079 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 53 and number: IQ-20250803071017-0192
2025-08-03 07:10:17.132 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:17.295 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:17.855 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Final Business
2025-08-03 07:10:17.857 [http-nio-8080-exec-7] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Final Business
2025-08-03 07:10:17.881 [http-nio-8080-exec-7] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 54 and number: IQ-20250803071017-2805
2025-08-03 07:10:17.941 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:18.078 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:18.157 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:18.632 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:18.795 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:18.969 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:19.072 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:19.394 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:19.445 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:19.521 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:19.741 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:19.916 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:19.938 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:20.140 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: First Business
2025-08-03 07:10:20.140 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: First Business
2025-08-03 07:10:20.156 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 55 and number: IQ-20250803071020-0627
2025-08-03 07:10:20.238 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:20.308 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:20.453 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:20.686 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: No Storage Test
2025-08-03 07:10:20.687 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: No Storage Test
2025-08-03 07:10:20.700 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 56 and number: IQ-20250803071020-7466
2025-08-03 07:10:20.724 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:21.056 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Second Business
2025-08-03 07:10:21.057 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Second Business
2025-08-03 07:10:21.075 [http-nio-8080-exec-3] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 57 and number: IQ-20250803071021-2979
2025-08-03 07:10:21.137 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:21.381 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:21.779 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:21.977 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:22.182 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:22.483 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:22.611 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:22.950 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:23.099 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:23.516 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Premium Test Business
2025-08-03 07:10:23.517 [http-nio-8080-exec-9] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Premium Test Business
2025-08-03 07:10:23.526 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:23.544 [http-nio-8080-exec-9] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 58 and number: IQ-20250803071023-7083
2025-08-03 07:10:23.593 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:23.885 [http-nio-8080-exec-4] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto): [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value [A]; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] ]
2025-08-03 07:10:24.358 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Persistence Test Business
2025-08-03 07:10:24.359 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Persistence Test Business
2025-08-03 07:10:24.372 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 59 and number: IQ-20250803071024-9879
2025-08-03 07:10:24.431 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:24.478 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:24.667 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:24.791 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:25.329 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:25.754 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:26.756 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Full Stack Test Business
2025-08-03 07:10:26.757 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Full Stack Test Business
2025-08-03 07:10:26.782 [http-nio-8080-exec-8] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 60 and number: IQ-20250803071026-6855
2025-08-03 07:10:26.829 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:26.843 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:26.970 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:27.328 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:27.450 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:27.665 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:27.759 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:28.219 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Statistics Test Business
2025-08-03 07:10:28.220 [http-nio-8080-exec-7] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Statistics Test Business
2025-08-03 07:10:28.229 [http-nio-8080-exec-7] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 61 and number: IQ-20250803071028-4082
2025-08-03 07:10:28.246 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:28.276 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:216] - REST request to get quote statistics
2025-08-03 07:10:29.595 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: API Test Business
2025-08-03 07:10:29.595 [http-nio-8080-exec-1] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: API Test Business
2025-08-03 07:10:29.610 [http-nio-8080-exec-1] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 62 and number: IQ-20250803071029-9332
2025-08-03 07:10:29.662 [http-nio-8080-exec-2] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto) with 3 errors: [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [NotBlank.quoteDto.businessInformation.name,NotBlank.businessInformation.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name]]; default message [Business name is required]] [Field error in object 'quoteDto' on field 'businessInformation.name': rejected value []; codes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] [Field error in object 'quoteDto' on field 'businessInformation.state': rejected value [INVALID]; codes [Pattern.quoteDto.businessInformation.state,Pattern.businessInformation.state,Pattern.state,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.state,businessInformation.state]; arguments []; default message [businessInformation.state],[Ljakarta.validation.constraints.Pattern$Flag;@541d09e1,^[A-Z]{2}$]; default message [State must be a 2-letter uppercase code]] ]
2025-08-03 07:10:29.686 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:29.711 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:83] - REST request to get quote: 99999
2025-08-03 07:10:31.626 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:32.193 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:32.258 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:32.591 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:32.763 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:33.109 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:34.591 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:35.033 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:35.391 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:36.032 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:36.855 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:37.049 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:37.322 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:37.630 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:37.912 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Business
2025-08-03 07:10:37.913 [http-nio-8080-exec-5] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Business
2025-08-03 07:10:37.932 [http-nio-8080-exec-5] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 63 and number: IQ-20250803071037-3770
2025-08-03 07:10:37.963 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:38.303 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:39.863 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:40.457 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:40.938 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:41.917 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:41.960 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:42.701 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:42.724 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:42.761 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:43.151 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:43.224 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:43.319 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:43.781 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:43.921 [http-nio-8080-exec-9] WARN  [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver:227] - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.insurance.quote.dto.QuoteDto> com.insurance.quote.controller.QuoteController.createQuote(com.insurance.quote.dto.QuoteDto): [Field error in object 'quoteDto' on field 'businessInformation.name': rejected valuecodes [Size.quoteDto.businessInformation.name,Size.businessInformation.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [quoteDto.businessInformation.name,businessInformation.name]; arguments []; default message [businessInformation.name],255,2]; default message [Business name must be between 2 and 255 characters]] ]
2025-08-03 07:10:44.243 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Valid Business
2025-08-03 07:10:44.244 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Valid Business
2025-08-03 07:10:44.253 [http-nio-8080-exec-2] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 64 and number: IQ-20250803071044-8020
2025-08-03 07:10:44.268 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:45.374 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:45.717 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:45.962 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:46.322 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test & Co. LLC (Special Characters)
2025-08-03 07:10:46.322 [http-nio-8080-exec-5] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test & Co. LLC (Special Characters)
2025-08-03 07:10:46.326 [http-nio-8080-exec-5] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 65 and number: IQ-20250803071046-6329
2025-08-03 07:10:46.338 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:46.607 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:46.875 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:47.163 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:47.564 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Network Test Business
2025-08-03 07:10:47.565 [http-nio-8080-exec-7] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Network Test Business
2025-08-03 07:10:47.573 [http-nio-8080-exec-7] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 66 and number: IQ-20250803071047-1742
2025-08-03 07:10:47.586 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:48.738 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:49.002 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:49.263 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:50.132 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:50.646 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:51.040 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:51.650 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Original Business
2025-08-03 07:10:51.652 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Original Business
2025-08-03 07:10:51.670 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 67 and number: IQ-20250803071051-6939
2025-08-03 07:10:51.698 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:52.043 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:52.593 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:53.002 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:53.639 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Test Business LLC
2025-08-03 07:10:53.640 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Test Business LLC
2025-08-03 07:10:53.653 [http-nio-8080-exec-6] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 68 and number: IQ-20250803071053-1279
2025-08-03 07:10:53.691 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:53.975 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:54.481 [http-nio-8080-exec-5] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:54.768 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:55.883 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:56.154 [http-nio-8080-exec-2] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:56.377 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:56.848 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:57.029 [http-nio-8080-exec-7] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:57.216 [http-nio-8080-exec-8] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:57.739 [http-nio-8080-exec-10] INFO  [c.i.quote.controller.QuoteController:55] - REST request to create quote for business: Persistent Business
2025-08-03 07:10:57.739 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:65] - Creating new quote for business: Persistent Business
2025-08-03 07:10:57.743 [http-nio-8080-exec-10] INFO  [c.i.q.service.impl.QuoteServiceImpl:91] - Created quote with ID: 69 and number: IQ-20250803071057-0911
2025-08-03 07:10:57.779 [http-nio-8080-exec-9] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:57.859 [http-nio-8080-exec-1] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:10:59.913 [http-nio-8080-exec-3] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:11:00.199 [http-nio-8080-exec-4] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
2025-08-03 07:11:00.401 [http-nio-8080-exec-6] INFO  [c.i.quote.controller.QuoteController:102] - REST request to get all quotes with pagination: Page request [number: 0, size 20, sort: createdAt: DESC]
